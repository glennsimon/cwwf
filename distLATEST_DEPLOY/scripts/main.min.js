"use strict"; /* !
 * screenfull
 * v3.3.2 - 2017-10-27
 * (c) Sindre Sorhus; MIT License
 */
/* eslint-env es6, browser */
(function () {
  'use strict';

  var document;
  if (typeof window !== 'undefined' && typeof window.document !== 'undefined') {
    document = window.document;
  } else {
    document = {};
  }
  var isCommonjs = typeof module !== 'undefined' && module.exports;
  var keyboardAllowed =
  typeof Element !== 'undefined' && 'ALLOW_KEYBOARD_INPUT' in Element;

  var fn = function () {
    var val;

    var fnMap = [
    [
    'requestFullscreen',
    'exitFullscreen',
    'fullscreenElement',
    'fullscreenEnabled',
    'fullscreenchange',
    'fullscreenerror'],

    // New WebKit
    [
    'webkitRequestFullscreen',
    'webkitExitFullscreen',
    'webkitFullscreenElement',
    'webkitFullscreenEnabled',
    'webkitfullscreenchange',
    'webkitfullscreenerror'],


    // Old WebKit (Safari 5.1)
    [
    'webkitRequestFullScreen',
    'webkitCancelFullScreen',
    'webkitCurrentFullScreenElement',
    'webkitCancelFullScreen',
    'webkitfullscreenchange',
    'webkitfullscreenerror'],


    [
    'mozRequestFullScreen',
    'mozCancelFullScreen',
    'mozFullScreenElement',
    'mozFullScreenEnabled',
    'mozfullscreenchange',
    'mozfullscreenerror'],

    [
    'msRequestFullscreen',
    'msExitFullscreen',
    'msFullscreenElement',
    'msFullscreenEnabled',
    'MSFullscreenChange',
    'MSFullscreenError']];



    var i = 0;
    var l = fnMap.length;
    var ret = {};

    for (; i < l; i++) {
      val = fnMap[i];
      if (val && val[1] in document) {
        for (i = 0; i < val.length; i++) {
          ret[fnMap[0][i]] = val[i];
        }
        return ret;
      }
    }

    return false;
  }();

  var eventNameMap = {
    change: fn.fullscreenchange,
    error: fn.fullscreenerror };


  var screenfull = {
    request: function request(elem) {
      var request = fn.requestFullscreen;

      elem = elem || document.documentElement;

      // Work around Safari 5.1 bug: reports support for
      // keyboard in fullscreen even though it doesn't.
      // Browser sniffing, since the alternative with
      // setTimeout is even worse.
      if (/ Version\/5\.1(?:\.\d+)? Safari\//.test(navigator.userAgent)) {
        elem[request]();
      } else {
        elem[request](keyboardAllowed && Element.ALLOW_KEYBOARD_INPUT);
      }
    },
    exit: function exit() {
      document[fn.exitFullscreen]();
    },
    toggle: function toggle(elem) {
      if (this.isFullscreen) {
        this.exit();
      } else {
        this.request(elem);
      }
    },
    onchange: function onchange(callback) {
      this.on('change', callback);
    },
    onerror: function onerror(callback) {
      this.on('error', callback);
    },
    on: function on(event, callback) {
      var eventName = eventNameMap[event];
      if (eventName) {
        document.addEventListener(eventName, callback, false);
      }
    },
    off: function off(event, callback) {
      var eventName = eventNameMap[event];
      if (eventName) {
        document.removeEventListener(eventName, callback, false);
      }
    },
    raw: fn };


  if (!fn) {
    if (isCommonjs) {
      module.exports = false;
    } else {
      window.screenfull = false;
    }

    return;
  }

  Object.defineProperties(screenfull, {
    isFullscreen: {
      get: function get() {
        return Boolean(document[fn.fullscreenElement]);
      } },

    element: {
      enumerable: true,
      get: function get() {
        return document[fn.fullscreenElement];
      } },

    enabled: {
      enumerable: true,
      get: function get() {
        // Coerce to boolean in case of old WebKit
        return Boolean(document[fn.fullscreenEnabled]);
      } } });



  if (isCommonjs) {
    module.exports = screenfull;
  } else {
    window.screenfull = screenfull;
  }
})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,

"use strict";function _typeof(obj) {"@babel/helpers - typeof";if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};}return _typeof(obj);} /* eslint-disable */
(function () {

  // nb. This is for IE10 and lower _only_.
  var supportCustomEvent = window.CustomEvent;
  if (!supportCustomEvent || _typeof(supportCustomEvent) === 'object') {
    supportCustomEvent = function CustomEvent(event, x) {
      x = x || {};
      var ev = document.createEvent('CustomEvent');
      ev.initCustomEvent(event, !!x.bubbles, !!x.cancelable, x.detail || null);
      return ev;
    };
    supportCustomEvent.prototype = window.Event.prototype;
  }

  /**
   * @param {Element} el to check for stacking context
   * @return {boolean} whether this el or its parents creates a stacking context
   */
  function createsStackingContext(el) {
    while (el && el !== document.body) {
      var s = window.getComputedStyle(el);
      var invalid = function invalid(k, ok) {
        return !(s[k] === undefined || s[k] === ok);
      };
      if (s.opacity < 1 ||
      invalid('zIndex', 'auto') ||
      invalid('transform', 'none') ||
      invalid('mixBlendMode', 'normal') ||
      invalid('filter', 'none') ||
      invalid('perspective', 'none') ||
      s['isolation'] === 'isolate' ||
      s.position === 'fixed' ||
      s.webkitOverflowScrolling === 'touch') {
        return true;
      }
      el = el.parentElement;
    }
    return false;
  }

  /**
   * Finds the nearest <dialog> from the passed element.
   *
   * @param {Element} el to search from
   * @return {HTMLDialogElement} dialog found
   */
  function findNearestDialog(el) {
    while (el) {
      if (el.localName === 'dialog') {
        return (/** @type {HTMLDialogElement} */el);
      }
      el = el.parentElement;
    }
    return null;
  }

  /**
   * Blur the specified element, as long as it's not the HTML body element.
   * This works around an IE9/10 bug - blurring the body causes Windows to
   * blur the whole application.
   *
   * @param {Element} el to blur
   */
  function safeBlur(el) {
    if (el && el.blur && el !== document.body) {
      el.blur();
    }
  }

  /**
   * @param {!NodeList} nodeList to search
   * @param {Node} node to find
   * @return {boolean} whether node is inside nodeList
   */
  function inNodeList(nodeList, node) {
    for (var i = 0; i < nodeList.length; ++i) {
      if (nodeList[i] === node) {
        return true;
      }
    }
    return false;
  }

  /**
   * @param {HTMLFormElement} el to check
   * @return {boolean} whether this form has method="dialog"
   */
  function isFormMethodDialog(el) {
    if (!el || !el.hasAttribute('method')) {
      return false;
    }
    return el.getAttribute('method').toLowerCase() === 'dialog';
  }

  /**
   * @param {!HTMLDialogElement} dialog to upgrade
   * @constructor
   */
  function dialogPolyfillInfo(dialog) {
    this.dialog_ = dialog;
    this.replacedStyleTop_ = false;
    this.openAsModal_ = false;

    // Set a11y role. Browsers that support dialog implicitly know this already.
    if (!dialog.hasAttribute('role')) {
      dialog.setAttribute('role', 'dialog');
    }

    dialog.show = this.show.bind(this);
    dialog.showModal = this.showModal.bind(this);
    dialog.close = this.close.bind(this);

    if (!('returnValue' in dialog)) {
      dialog.returnValue = '';
    }

    if ('MutationObserver' in window) {
      var mo = new MutationObserver(this.maybeHideModal.bind(this));
      mo.observe(dialog, { attributes: true, attributeFilter: ['open'] });
    } else {
      // IE10 and below support. Note that DOMNodeRemoved etc fire _before_ removal. They also
      // seem to fire even if the element was removed as part of a parent removal. Use the removed
      // events to force downgrade (useful if removed/immediately added).
      var removed = false;
      var cb = function () {
        removed ? this.downgradeModal() : this.maybeHideModal();
        removed = false;
      }.bind(this);
      var timeout;
      var delayModel = function delayModel(ev) {
        if (ev.target !== dialog) {return;} // not for a child element
        var cand = 'DOMNodeRemoved';
        removed |= ev.type.substr(0, cand.length) === cand;
        window.clearTimeout(timeout);
        timeout = window.setTimeout(cb, 0);
      };
      ['DOMAttrModified', 'DOMNodeRemoved', 'DOMNodeRemovedFromDocument'].forEach(function (name) {
        dialog.addEventListener(name, delayModel);
      });
    }
    // Note that the DOM is observed inside DialogManager while any dialog
    // is being displayed as a modal, to catch modal removal from the DOM.

    Object.defineProperty(dialog, 'open', {
      set: this.setOpen.bind(this),
      get: dialog.hasAttribute.bind(dialog, 'open') });


    this.backdrop_ = document.createElement('div');
    this.backdrop_.className = 'backdrop';
    this.backdrop_.addEventListener('click', this.backdropClick_.bind(this));
  }

  dialogPolyfillInfo.prototype = {

    get dialog() {
      return this.dialog_;
    },

    /**
     * Maybe remove this dialog from the modal top layer. This is called when
     * a modal dialog may no longer be tenable, e.g., when the dialog is no
     * longer open or is no longer part of the DOM.
     */
    maybeHideModal: function maybeHideModal() {
      if (this.dialog_.hasAttribute('open') && document.body.contains(this.dialog_)) {return;}
      this.downgradeModal();
    },

    /**
     * Remove this dialog from the modal top layer, leaving it as a non-modal.
     */
    downgradeModal: function downgradeModal() {
      if (!this.openAsModal_) {return;}
      this.openAsModal_ = false;
      this.dialog_.style.zIndex = '';

      // This won't match the native <dialog> exactly because if the user set top on a centered
      // polyfill dialog, that top gets thrown away when the dialog is closed. Not sure it's
      // possible to polyfill this perfectly.
      if (this.replacedStyleTop_) {
        this.dialog_.style.top = '';
        this.replacedStyleTop_ = false;
      }

      // Clear the backdrop and remove from the manager.
      this.backdrop_.parentNode && this.backdrop_.parentNode.removeChild(this.backdrop_);
      dialogPolyfill.dm.removeDialog(this);
    },

    /**
     * @param {boolean} value whether to open or close this dialog
     */
    setOpen: function setOpen(value) {
      if (value) {
        this.dialog_.hasAttribute('open') || this.dialog_.setAttribute('open', '');
      } else {
        this.dialog_.removeAttribute('open');
        this.maybeHideModal(); // nb. redundant with MutationObserver
      }
    },

    /**
     * Handles clicks on the fake .backdrop element, redirecting them as if
     * they were on the dialog itself.
     *
     * @param {!Event} e to redirect
     */
    backdropClick_: function backdropClick_(e) {
      if (!this.dialog_.hasAttribute('tabindex')) {
        // Clicking on the backdrop should move the implicit cursor, even if dialog cannot be
        // focused. Create a fake thing to focus on. If the backdrop was _before_ the dialog, this
        // would not be needed - clicks would move the implicit cursor there.
        var fake = document.createElement('div');
        this.dialog_.insertBefore(fake, this.dialog_.firstChild);
        fake.tabIndex = -1;
        fake.focus();
        this.dialog_.removeChild(fake);
      } else {
        this.dialog_.focus();
      }

      var redirectedEvent = document.createEvent('MouseEvents');
      redirectedEvent.initMouseEvent(e.type, e.bubbles, e.cancelable, window,
      e.detail, e.screenX, e.screenY, e.clientX, e.clientY, e.ctrlKey,
      e.altKey, e.shiftKey, e.metaKey, e.button, e.relatedTarget);
      this.dialog_.dispatchEvent(redirectedEvent);
      e.stopPropagation();
    },

    /**
     * Focuses on the first focusable element within the dialog. This will always blur the current
     * focus, even if nothing within the dialog is found.
     */
    focus_: function focus_() {
      // Find element with `autofocus` attribute, or fall back to the first form/tabindex control.
      var target = this.dialog_.querySelector('[autofocus]:not([disabled])');
      if (!target && this.dialog_.tabIndex >= 0) {
        target = this.dialog_;
      }
      if (!target) {
        // Note that this is 'any focusable area'. This list is probably not exhaustive, but the
        // alternative involves stepping through and trying to focus everything.
        var opts = ['button', 'input', 'keygen', 'select', 'textarea'];
        var query = opts.map(function (el) {
          return el + ':not([disabled])';
        });
        // TODO(samthor): tabindex values that are not numeric are not focusable.
        query.push('[tabindex]:not([disabled]):not([tabindex=""])'); // tabindex != "", not disabled
        target = this.dialog_.querySelector(query.join(', '));
      }
      safeBlur(document.activeElement);
      target && target.focus();
    },

    /**
     * Sets the zIndex for the backdrop and dialog.
     *
     * @param {number} dialogZ
     * @param {number} backdropZ
     */
    updateZIndex: function updateZIndex(dialogZ, backdropZ) {
      if (dialogZ < backdropZ) {
        throw new Error('dialogZ should never be < backdropZ');
      }
      this.dialog_.style.zIndex = dialogZ;
      this.backdrop_.style.zIndex = backdropZ;
    },

    /**
     * Shows the dialog. If the dialog is already open, this does nothing.
     */
    show: function show() {
      if (!this.dialog_.open) {
        this.setOpen(true);
        this.focus_();
      }
    },

    /**
     * Show this dialog modally.
     */
    showModal: function showModal() {
      if (this.dialog_.hasAttribute('open')) {
        throw new Error('Failed to execute \'showModal\' on dialog: The element is already open, and therefore cannot be opened modally.');
      }
      if (!document.body.contains(this.dialog_)) {
        throw new Error('Failed to execute \'showModal\' on dialog: The element is not in a Document.');
      }
      if (!dialogPolyfill.dm.pushDialog(this)) {
        throw new Error('Failed to execute \'showModal\' on dialog: There are too many open modal dialogs.');
      }

      if (createsStackingContext(this.dialog_.parentElement)) {
        console.warn('A dialog is being shown inside a stacking context. ' +
        'This may cause it to be unusable. For more information, see this link: ' +
        'https://github.com/GoogleChrome/dialog-polyfill/#stacking-context');
      }

      this.setOpen(true);
      this.openAsModal_ = true;

      // Optionally center vertically, relative to the current viewport.
      if (dialogPolyfill.needsCentering(this.dialog_)) {
        dialogPolyfill.reposition(this.dialog_);
        this.replacedStyleTop_ = true;
      } else {
        this.replacedStyleTop_ = false;
      }

      // Insert backdrop.
      this.dialog_.parentNode.insertBefore(this.backdrop_, this.dialog_.nextSibling);

      // Focus on whatever inside the dialog.
      this.focus_();
    },

    /**
     * Closes this HTMLDialogElement. This is optional vs clearing the open
     * attribute, however this fires a 'close' event.
     *
     * @param {string=} opt_returnValue to use as the returnValue
     */
    close: function close(opt_returnValue) {
      if (!this.dialog_.hasAttribute('open')) {
        throw new Error('Failed to execute \'close\' on dialog: The element does not have an \'open\' attribute, and therefore cannot be closed.');
      }
      this.setOpen(false);

      // Leave returnValue untouched in case it was set directly on the element
      if (opt_returnValue !== undefined) {
        this.dialog_.returnValue = opt_returnValue;
      }

      // Triggering "close" event for any attached listeners on the <dialog>.
      var closeEvent = new supportCustomEvent('close', {
        bubbles: false,
        cancelable: false });

      this.dialog_.dispatchEvent(closeEvent);
    } };



  var dialogPolyfill = {};

  dialogPolyfill.reposition = function (element) {
    var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;
    var topValue = scrollTop + (window.innerHeight - element.offsetHeight) / 2;
    element.style.top = Math.max(scrollTop, topValue) + 'px';
  };

  dialogPolyfill.isInlinePositionSetByStylesheet = function (element) {
    for (var i = 0; i < document.styleSheets.length; ++i) {
      var styleSheet = document.styleSheets[i];
      var cssRules = null;
      // Some browsers throw on cssRules.
      try {
        cssRules = styleSheet.cssRules;
      } catch (e) {}
      if (!cssRules) {continue;}
      for (var j = 0; j < cssRules.length; ++j) {
        var rule = cssRules[j];
        var selectedNodes = null;
        // Ignore errors on invalid selector texts.
        try {
          selectedNodes = document.querySelectorAll(rule.selectorText);
        } catch (e) {}
        if (!selectedNodes || !inNodeList(selectedNodes, element)) {
          continue;
        }
        var cssTop = rule.style.getPropertyValue('top');
        var cssBottom = rule.style.getPropertyValue('bottom');
        if (cssTop && cssTop !== 'auto' || cssBottom && cssBottom !== 'auto') {
          return true;
        }
      }
    }
    return false;
  };

  dialogPolyfill.needsCentering = function (dialog) {
    var computedStyle = window.getComputedStyle(dialog);
    if (computedStyle.position !== 'absolute') {
      return false;
    }

    // We must determine whether the top/bottom specified value is non-auto.  In
    // WebKit/Blink, checking computedStyle.top == 'auto' is sufficient, but
    // Firefox returns the used value. So we do this crazy thing instead: check
    // the inline style and then go through CSS rules.
    if (dialog.style.top !== 'auto' && dialog.style.top !== '' ||
    dialog.style.bottom !== 'auto' && dialog.style.bottom !== '') {
      return false;
    }
    return !dialogPolyfill.isInlinePositionSetByStylesheet(dialog);
  };

  /**
   * @param {!Element} element to force upgrade
   */
  dialogPolyfill.forceRegisterDialog = function (element) {
    if (window.HTMLDialogElement || element.showModal) {
      console.warn('This browser already supports <dialog>, the polyfill ' +
      'may not work correctly', element);
    }
    if (element.localName !== 'dialog') {
      throw new Error('Failed to register dialog: The element is not a dialog.');
    }
    new dialogPolyfillInfo( /** @type {!HTMLDialogElement} */element);
  };

  /**
   * @param {!Element} element to upgrade, if necessary
   */
  dialogPolyfill.registerDialog = function (element) {
    if (!element.showModal) {
      dialogPolyfill.forceRegisterDialog(element);
    }
  };

  /**
   * @constructor
   */
  dialogPolyfill.DialogManager = function () {
    /** @type {!Array<!dialogPolyfillInfo>} */
    this.pendingDialogStack = [];

    var checkDOM = this.checkDOM_.bind(this);

    // The overlay is used to simulate how a modal dialog blocks the document.
    // The blocking dialog is positioned on top of the overlay, and the rest of
    // the dialogs on the pending dialog stack are positioned below it. In the
    // actual implementation, the modal dialog stacking is controlled by the
    // top layer, where z-index has no effect.
    this.overlay = document.createElement('div');
    this.overlay.className = '_dialog_overlay';
    this.overlay.addEventListener('click', function (e) {
      this.forwardTab_ = undefined;
      e.stopPropagation();
      checkDOM([]); // sanity-check DOM
    }.bind(this));

    this.handleKey_ = this.handleKey_.bind(this);
    this.handleFocus_ = this.handleFocus_.bind(this);

    this.zIndexLow_ = 100000;
    this.zIndexHigh_ = 100000 + 150;

    this.forwardTab_ = undefined;

    if ('MutationObserver' in window) {
      this.mo_ = new MutationObserver(function (records) {
        var removed = [];
        records.forEach(function (rec) {
          for (var i = 0, c; c = rec.removedNodes[i]; ++i) {
            if (!(c instanceof Element)) {
              continue;
            } else if (c.localName === 'dialog') {
              removed.push(c);
            }
            removed = removed.concat(c.querySelectorAll('dialog'));
          }
        });
        removed.length && checkDOM(removed);
      });
    }
  };

  /**
   * Called on the first modal dialog being shown. Adds the overlay and related
   * handlers.
   */
  dialogPolyfill.DialogManager.prototype.blockDocument = function () {
    document.documentElement.addEventListener('focus', this.handleFocus_, true);
    document.addEventListener('keydown', this.handleKey_);
    this.mo_ && this.mo_.observe(document, { childList: true, subtree: true });
  };

  /**
   * Called on the first modal dialog being removed, i.e., when no more modal
   * dialogs are visible.
   */
  dialogPolyfill.DialogManager.prototype.unblockDocument = function () {
    document.documentElement.removeEventListener('focus', this.handleFocus_, true);
    document.removeEventListener('keydown', this.handleKey_);
    this.mo_ && this.mo_.disconnect();
  };

  /**
   * Updates the stacking of all known dialogs.
   */
  dialogPolyfill.DialogManager.prototype.updateStacking = function () {
    var zIndex = this.zIndexHigh_;

    for (var i = 0, dpi; dpi = this.pendingDialogStack[i]; ++i) {
      dpi.updateZIndex(--zIndex, --zIndex);
      if (i === 0) {
        this.overlay.style.zIndex = --zIndex;
      }
    }

    // Make the overlay a sibling of the dialog itself.
    var last = this.pendingDialogStack[0];
    if (last) {
      var p = last.dialog.parentNode || document.body;
      p.appendChild(this.overlay);
    } else if (this.overlay.parentNode) {
      this.overlay.parentNode.removeChild(this.overlay);
    }
  };

  /**
   * @param {Element} candidate to check if contained or is the top-most modal dialog
   * @return {boolean} whether candidate is contained in top dialog
   */
  dialogPolyfill.DialogManager.prototype.containedByTopDialog_ = function (candidate) {
    while (candidate = findNearestDialog(candidate)) {
      for (var i = 0, dpi; dpi = this.pendingDialogStack[i]; ++i) {
        if (dpi.dialog === candidate) {
          return i === 0; // only valid if top-most
        }
      }
      candidate = candidate.parentElement;
    }
    return false;
  };

  dialogPolyfill.DialogManager.prototype.handleFocus_ = function (event) {
    if (this.containedByTopDialog_(event.target)) {return;}

    event.preventDefault();
    event.stopPropagation();
    safeBlur( /** @type {Element} */event.target);

    if (this.forwardTab_ === undefined) {return;} // move focus only from a tab key

    var dpi = this.pendingDialogStack[0];
    var dialog = dpi.dialog;
    var position = dialog.compareDocumentPosition(event.target);
    if (position & Node.DOCUMENT_POSITION_PRECEDING) {
      if (this.forwardTab_) {// forward
        dpi.focus_();
      } else {// backwards
        document.documentElement.focus();
      }
    } else {
      // TODO: Focus after the dialog, is ignored.
    }

    return false;
  };

  dialogPolyfill.DialogManager.prototype.handleKey_ = function (event) {
    this.forwardTab_ = undefined;
    if (event.keyCode === 27) {
      event.preventDefault();
      event.stopPropagation();
      var cancelEvent = new supportCustomEvent('cancel', {
        bubbles: false,
        cancelable: true });

      var dpi = this.pendingDialogStack[0];
      if (dpi && dpi.dialog.dispatchEvent(cancelEvent)) {
        dpi.dialog.close();
      }
    } else if (event.keyCode === 9) {
      this.forwardTab_ = !event.shiftKey;
    }
  };

  /**
   * Finds and downgrades any known modal dialogs that are no longer displayed. Dialogs that are
   * removed and immediately readded don't stay modal, they become normal.
   *
   * @param {!Array<!HTMLDialogElement>} removed that have definitely been removed
   */
  dialogPolyfill.DialogManager.prototype.checkDOM_ = function (removed) {
    // This operates on a clone because it may cause it to change. Each change also calls
    // updateStacking, which only actually needs to happen once. But who removes many modal dialogs
    // at a time?!
    var clone = this.pendingDialogStack.slice();
    clone.forEach(function (dpi) {
      if (removed.indexOf(dpi.dialog) !== -1) {
        dpi.downgradeModal();
      } else {
        dpi.maybeHideModal();
      }
    });
  };

  /**
   * @param {!dialogPolyfillInfo} dpi
   * @return {boolean} whether the dialog was allowed
   */
  dialogPolyfill.DialogManager.prototype.pushDialog = function (dpi) {
    var allowed = (this.zIndexHigh_ - this.zIndexLow_) / 2 - 1;
    if (this.pendingDialogStack.length >= allowed) {
      return false;
    }
    if (this.pendingDialogStack.unshift(dpi) === 1) {
      this.blockDocument();
    }
    this.updateStacking();
    return true;
  };

  /**
   * @param {!dialogPolyfillInfo} dpi
   */
  dialogPolyfill.DialogManager.prototype.removeDialog = function (dpi) {
    var index = this.pendingDialogStack.indexOf(dpi);
    if (index === -1) {return;}

    this.pendingDialogStack.splice(index, 1);
    if (this.pendingDialogStack.length === 0) {
      this.unblockDocument();
    }
    this.updateStacking();
  };

  dialogPolyfill.dm = new dialogPolyfill.DialogManager();
  dialogPolyfill.formSubmitter = null;
  dialogPolyfill.useValue = null;

  /**
   * Installs global handlers, such as click listers and native method overrides. These are needed
   * even if a no dialog is registered, as they deal with <form method="dialog">.
   */
  if (window.HTMLDialogElement === undefined) {var




























































    replacementFormSubmit = function replacementFormSubmit() {
      if (!isFormMethodDialog(this)) {
        return nativeFormSubmit.call(this);
      }
      var dialog = findNearestDialog(this);
      dialog && dialog.close();
    }; /**
     * If HTMLFormElement translates method="DIALOG" into 'get', then replace the descriptor with
     * one that returns the correct value.
     */var testForm = document.createElement('form');testForm.setAttribute('method', 'dialog');if (testForm.method !== 'dialog') {var methodDescriptor = Object.getOwnPropertyDescriptor(HTMLFormElement.prototype, 'method');if (methodDescriptor) {// TODO: older iOS and older PhantomJS fail to return the descriptor here
        var realGet = methodDescriptor.get;methodDescriptor.get = function () {if (isFormMethodDialog(this)) {return 'dialog';}return realGet.call(this);};var realSet = methodDescriptor.set;methodDescriptor.set = function (v) {if (typeof v === 'string' && v.toLowerCase() === 'dialog') {return this.setAttribute('method', v);}return realSet.call(this, v);};Object.defineProperty(HTMLFormElement.prototype, 'method', methodDescriptor);}} /**
     * Global 'click' handler, to capture the <input type="submit"> or <button> element which has
     * submitted a <form method="dialog">. Needed as Safari and others don't report this inside
     * document.activeElement.
     */document.addEventListener('click', function (ev) {dialogPolyfill.formSubmitter = null;dialogPolyfill.useValue = null;if (ev.defaultPrevented) {return;} // e.g. a submit which prevents default submission
      var target = /** @type {Element} */ev.target;if (!target || !isFormMethodDialog(target.form)) {return;}var valid = target.type === 'submit' && ['button', 'input'].indexOf(target.localName) > -1;if (!valid) {if (!(target.localName === 'input' && target.type === 'image')) {return;} // this is a <input type="image">, which can submit forms
        dialogPolyfill.useValue = ev.offsetX + ',' + ev.offsetY;}var dialog = findNearestDialog(target);if (!dialog) {return;}dialogPolyfill.formSubmitter = target;}, false); /**
     * Replace the native HTMLFormElement.submit() method, as it won't fire the
     * submit event and give us a chance to respond.
     */var nativeFormSubmit = HTMLFormElement.prototype.submit;HTMLFormElement.prototype.submit = replacementFormSubmit; /**
     * Global form 'dialog' method handler. Closes a dialog correctly on submit
     * and possibly sets its return value.
     */document.addEventListener('submit', function (ev) {var form = /** @type {HTMLFormElement} */ev.target;if (!isFormMethodDialog(form)) {return;}ev.preventDefault();var dialog = findNearestDialog(form);if (!dialog) {return;} // Forms can only be submitted via .submit() or a click (?), but anyway: sanity-check that
      // the submitter is correct before using its value as .returnValue.
      var s = dialogPolyfill.formSubmitter;if (s && s.form === form) {
        dialog.close(dialogPolyfill.useValue || s.value);
      } else {
        dialog.close();
      }
      dialogPolyfill.formSubmitter = null;
    }, true);
  }

  dialogPolyfill['forceRegisterDialog'] = dialogPolyfill.forceRegisterDialog;
  dialogPolyfill['registerDialog'] = dialogPolyfill.registerDialog;

  if (typeof define === 'function' && 'amd' in define) {
    // AMD support
    define(function () {return dialogPolyfill;});
  } else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === 'object' && _typeof(module['exports']) === 'object') {
    // CommonJS support
    module['exports'] = dialogPolyfill;
  } else {
    // all others
    window['dialogPolyfill'] = dialogPolyfill;
  }
})();
/* eslint-enable */
//# sourceMappingURL=data:application/json;charset=utf8;base64,

"use strict";function _createForOfIteratorHelper(o, allowArrayLike) {var it;if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = o[Symbol.iterator]();}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;} /* eslint-env es6, browser */
var puzzleWorker = function () {
  'use strict';

  // Check to make sure service workers are supported in the current browser,
  // and that the current page is accessed from a secure origin. Using a
  // service worker from an insecure origin will trigger JS console errors. See
  // http://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features
  var isLocalhost = Boolean(
  window.location.hostname === 'localhost' ||
  // [::1] is the IPv6 localhost address.
  window.location.hostname === '[::1]' ||
  // 127.0.0.1/8 is considered localhost for IPv4.
  window.location.hostname.match(
  /^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));



  if (
  'serviceWorker' in navigator && (
  window.location.protocol === 'https:' || isLocalhost))
  {
    navigator.serviceWorker.
    register('service-worker.js').
    then(function (registration) {
      // updatefound is fired if service-worker.js changes.
      registration.onupdatefound = function () {
        // updatefound is also fired the very first time the SW is
        // installed, and there's no need to prompt for a reload at
        // that point.
        // So check here to see if the page is already controlled,
        // i.e. whether there's an existing service worker.
        if (navigator.serviceWorker.controller) {
          // The updatefound event implies that registration.installing is
          // set:
          // https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#service-worker-container-updatefound-event
          var installingWorker = registration.installing;

          installingWorker.onstatechange = function () {
            switch (installingWorker.state) {
              case 'installed':
                // At this point, the old content will have been purged
                // and the fresh content will have been added to the
                // cache. It's the perfect time to display a "New
                // content is available; please refresh." message in
                // the page's interface.
                break;

              case 'redundant':
                throw new Error(
                'The installing service worker became redundant.');


              default:
              // Ignore
            }
          };
        }
      };
    })["catch"](
    function (e) {
      console.error('Error during service worker registration:', e);
    });
  }

  // const yearPicker = document.getElementById('pickYear');
  // const monthPicker = document.getElementById('pickMonth');
  // const dayPicker = document.getElementById('pickDay');
  var puzTitle = document.getElementById('puzTitle');
  var puzTable = document.getElementById('puzTable');
  var puzAuthor = document.getElementById('puzAuthor');
  var puzCopy = document.getElementById('puzCopy');
  var puzNotepad = document.getElementById('puzNotepad');
  var clueContainer = document.getElementById('clueContainer');
  var acrossClues = document.getElementById('acrossClues');
  var downClues = document.getElementById('downClues');
  var singleClue = document.getElementById('singleClue');
  var keyboard = document.getElementById('kbContainer');
  var screenToggle = document.getElementById('screenToggle');
  var splash = document.getElementById('splash');
  var scores = document.getElementById('scores');
  var myName = document.getElementById('myName');
  var oppName = document.getElementById('oppName');
  var myScore = document.getElementById('myScore');
  var oppScore = document.getElementById('oppScore');
  var logo = document.getElementById('logo');
  var concessionBtn = document.getElementById('concessionBtn');
  var firebase = window.firebase;
  var db = firebase.firestore();
  var messaging = firebase.messaging.isSupported() ?
  firebase.messaging() : null;
  var scoreValues = {
    A: 1, B: 4, C: 4, D: 2, E: 1, F: 4, G: 3, H: 4, I: 1, J: 10, K: 5, L: 2,
    M: 4, N: 2, O: 1, P: 4, Q: 10, R: 1, S: 1, T: 1, U: 2, V: 5, W: 4, X: 8,
    Y: 4, Z: 10 };


  var currentUser = firebase.auth().currentUser;
  var myOpponentUid = null;
  var currentCell = null;
  var acrossWord = true;
  var game = null;
  var columns = null;
  var currentClue = null;
  var idxArray = [];
  var puzzleId = null;
  var myTurn = null;
  var clueNumIndices = {};

  if (messaging) {
    messaging.onMessage(function (payload) {
      console.log('onMessage: ', payload);
    });
  }

  firebase.auth().onAuthStateChanged(function (user) {
    if (user) {
      currentUser = user;
      if (messaging) {
        sendTokenToServer();
      }
    }
  });

  /**
   * Send cloud messaging token to server
   * @param {string} token Cloud messaging token
   */
  function sendTokenToServer() {
    messaging.requestPermission().
    then(function () {
      return messaging.getToken();
    }).
    then(function (token) {
      console.log('Permission granted. Token: ', token);
      var userStatusFirestoreRef = firebase.
      firestore().
      doc("/users/".concat(currentUser.uid));
      userStatusFirestoreRef.set({ msgToken: token }, { merge: true });
    })["catch"](
    function (err) {
      console.log('User denied messaging', err);
    });
  }

  logo.addEventListener('click', function () {
    location.hash = '#games';
  });

  puzTitle.innerText = 'No puzzle loaded';

  /**
   * This function takes the puzzle object returned from the fetch and displays
   * a grid and clues. The HTML table element is a placeholder and the rows and
   * cells are created on the fly. The fetched puzzle is stored as an object in
   * the variable "game".
   */
  function showPuzzle() {
    // clear previous puzzle if it exists
    if (puzTable.children) {
      clearPuzzle();
    }
    idxArray = [];
    clueNumIndices = {};
    // initial estimate of element size used to determine
    // cellDim -> tableDim -> puzzle size
    if (game.puzzle.notepad) {
      // puzNotepad.style.width = '300px';
      puzNotepad.innerHTML = "<b>Notepad:</b>".concat(game.puzzle.notepad);
      puzNotepad.classList.remove('displayNone');
    }
    puzTitle.innerText = game.puzzle.title ? game.puzzle.title : 'Untitled';
    puzAuthor.innerText = "by ".concat(
    game.puzzle.author ? game.puzzle.author : 'Anonymous');

    puzCopy.innerHTML = game.puzzle.copyright ? "&copy; ".concat(
    game.puzzle.copyright) :
    '';

    var cellDim = getCellDim();
    var tableDim = cellDim * game.puzzle.rows;
    var gridIndex = 0;
    for (var rowIndex = 0; rowIndex < game.puzzle.rows; rowIndex += 1) {
      var row = puzTable.insertRow(rowIndex);
      row.style.width = "".concat(tableDim, "px");
      for (var colIndex = 0; colIndex < game.puzzle.cols; colIndex += 1) {
        var clueNumber = game.puzzle.grid[gridIndex].clueNum;
        var cell = row.insertCell(colIndex);
        var blackCell = game.puzzle.grid[gridIndex].black;

        cell.style.width = "".concat(cellDim, "px");
        cell.style.height = "".concat(cellDim, "px");
        cell.addEventListener('click', cellClicked);
        if (blackCell) {
          cell.className = 'black';
        } else {
          cell.classList.add('cursorPointer');
          var squareDiv = document.createElement('div');
          var letterDiv = document.createElement('div');
          squareDiv.classList.add('square');
          letterDiv.classList.add('marginAuto');
          if (game.puzzle.grid[gridIndex].status === 'locked') {
            cell.classList.add(game.puzzle.grid[gridIndex].bgColor);
          }
          var guess = game.puzzle.grid[gridIndex].guess;
          letterDiv.innerText = guess ? guess : '';
          squareDiv.appendChild(letterDiv);
          cell.appendChild(squareDiv);
          if (clueNumber !== '') {
            clueNumIndices[clueNumber.toString()] = gridIndex;
            var clueNumDiv = document.createElement('div');
            clueNumDiv.classList.add('clueNumber');
            clueNumDiv.appendChild(document.createTextNode(clueNumber));
            cell.appendChild(clueNumDiv);
          }
          if (game.puzzle.grid[gridIndex].circle) {
            cell.children[0].classList.add('circle');
          }
        }
        gridIndex += 1;
      }
    }

    keyboard.classList.remove('displayNone');
    keyboard.classList.add('displayFlex');
    clueContainer.classList.remove('displayNone');
    splash.classList.add('displayNone');

    if (!game.puzzle.completedClues) {
      game.puzzle.completedClues = {};
      game.puzzle.completedClues.across = [];
      game.puzzle.completedClues.down = [];
    }

    // create contents for across clues div
    var _iterator = _createForOfIteratorHelper(game.puzzle.clues.across),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var clue = _step.value;
        var parsedClue = clue.split('.');
        var _clueNumber = parseInt(parsedClue[0], 10);
        var clueRef = parsedClue[0] + '.';
        var clueText = parsedClue.slice(1).join('.');
        var clueDiv = document.createElement('div');
        clueDiv.classList.add('displayFlex', 'cursorPointer');
        clueDiv.id = 'across' + _clueNumber;
        if (game.puzzle.completedClues.across.includes(_clueNumber)) {
          clueDiv.classList.add('colorLightGray');
        }

        var numDiv = document.createElement('div');
        numDiv.appendChild(document.createTextNode(clueRef));
        numDiv.classList.add('padRight', 'cursorPointer');

        var textDiv = document.createElement('div');
        textDiv.appendChild(document.createTextNode(clueText));
        textDiv.classList.add('cursorPointer');
        clueDiv.appendChild(numDiv);
        clueDiv.appendChild(textDiv);
        // clueDiv.addEventListener('click', acrossClueClick);
        acrossClues.appendChild(clueDiv);
      }

      // create contents for down clues div
    } catch (err) {_iterator.e(err);} finally {_iterator.f();}var _iterator2 = _createForOfIteratorHelper(game.puzzle.clues.down),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var _clue = _step2.value;
        var _parsedClue = _clue.split('.');
        var _clueNumber2 = parseInt(_parsedClue[0], 10);
        var _clueRef = _parsedClue[0] + '.';
        var _clueText = _parsedClue.slice(1).join('.');
        var _clueDiv = document.createElement('div');
        _clueDiv.classList.add('displayFlex', 'cursorPointer');
        _clueDiv.id = 'down' + _clueNumber2;
        if (game.puzzle.completedClues.down.includes(_clueNumber2)) {
          _clueDiv.classList.add('colorLightGray');
        }

        var _numDiv = document.createElement('div');
        _numDiv.appendChild(document.createTextNode(_clueRef));
        _numDiv.classList.add('padRight', 'cursorPointer');

        var _textDiv = document.createElement('div');
        _textDiv.appendChild(document.createTextNode(_clueText));
        _textDiv.classList.add('cursorPointer');
        _clueDiv.appendChild(_numDiv);
        _clueDiv.appendChild(_textDiv);
        downClues.appendChild(_clueDiv);
      }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

    acrossClues.addEventListener('click', function (event) {
      if (event.target.innerText !== '') {
        clueClicked(event, 'across');
      }
    });

    downClues.addEventListener('click', function (event) {
      if (event.target.innerText !== '') {
        clueClicked(event, 'down');
      }
    });

    scores.classList.remove('displayNone');
    scores.classList.add('displayFlex');
    var me = currentUser.uid === game.initiator.uid ?
    'initiator' : 'opponent';
    var they = me === 'initiator' ? 'opponent' : 'initiator';
    var myNickname = game[me].displayName;
    var oppNickname = game[they].displayName;

    myNickname =
    myNickname.indexOf(' ') === -1 ?
    myNickname :
    myNickname.slice(0, myNickname.indexOf(' '));
    myNickname = myNickname.length > 8 ? myNickname.slice(0, 8) : myNickname;
    myName.innerText = myNickname;
    oppNickname =
    oppNickname.indexOf(' ') === -1 ?
    oppNickname :
    oppNickname.slice(0, oppNickname.indexOf(' '));
    oppNickname =
    oppNickname.length > 8 ? oppNickname.slice(0, 8) : oppNickname;
    oppName.innerText = oppNickname;
    myScore.innerText = game[me].score;
    oppScore.innerText = game[they].score;
    myName.classList.add(game[me].bgColor.replace('bg', 'font'));
    oppName.classList.add(game[they].bgColor.replace('bg', 'font'));
    updateScoreHighlighting();
    if (game.emptySquares === 0) {
      var result = 'YOU WON!!';
      if (game[me].score > game[they].score) {
        game.winner = game[me].uid;
      } else {
        game.winner = game[they].uid;
        result = 'You lost';
      }
      game.status = 'finished';
      window.puzzleGames.showReplayDialog(game, result);
      savePuzzle();
    }
  }

  /**
   * When clue is clicked, this event fires
   * @param {Event} event Mouse click or screen touch event
   * @param {string} direction Clue direction (across or down)
   */
  function clueClicked(event, direction) {
    var clueNumberText = event.target.parentElement.firstChild.innerText;
    clueNumberText = clueNumberText.slice(0, clueNumberText.indexOf('.'));
    var cellIndex = clueNumIndices[clueNumberText];
    var row = Math.floor(cellIndex / columns);
    var col = cellIndex - row * columns;
    var cell = puzTable.firstChild.children[row].children[col];
    if (direction === 'across') {
      selectAcross(cell);
    } else {
      selectDown(cell);
    }
  }

  /**
   * Calculates width/height dimension of single cell in px
   * @return {number} dimension
   */
  function getCellDim() {
    var puzTableWidth = puzTable.offsetWidth;
    return Math.floor(puzTableWidth / game.puzzle.rows);
  }

  /**
   * Sets the variable currentCell to the cell the user clicked in
   * @param {Event} event Mouse click or screen touch event
   */
  function cellClicked(event) {
    var cell = event.target;
    var row = cell.parentElement.rowIndex;
    var col = cell.cellIndex;
    var index = row * columns + col;
    // console.log(cell.cellIndex);
    // console.log(cell.parentElement.rowIndex);
    // console.log(event);

    if (cell.className === 'black') {
      return;
    }
    if (!idxArray.includes(index)) {
      clearLetters();
    }
    if (currentCell && currentCell === cell) {
      clearLetters();
      acrossWord = !acrossWord;
    }
    idxArray = [];
    currentCell = cell;
    if (acrossWord) {
      selectAcross(cell);
    } else {
      selectDown(cell);
    }
  }

  /** Clears letters when user changes to a different clue */
  function clearLetters() {var _iterator3 = _createForOfIteratorHelper(
    idxArray),_step3;try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {var index = _step3.value;
        if (game.puzzle.grid[index].status === 'locked') continue;
        game.puzzle.grid[index].guess = '';
        var row = Math.floor(index / columns);
        var col = index - row * columns;
        puzTable.firstChild.children[row].children[
        col].
        firstChild.firstChild.innerText = '';
      }} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}
  }

  /**
   * Returns an array of indices of cells that make up a word block in
   * the current puzzle.
   * @param {Object} cell Cell in puzzle
   * @param {string} direction Direction (across or down)
   * @return {array} Array of indices that make up a word block
   */
  function getWordBlock(cell, direction) {
    var row = cell.parentElement.rowIndex;
    var col = cell.cellIndex;
    var index = row * columns + col;
    var indexArray = [];
    if (direction === 'across') {
      while (index > row * columns && !game.puzzle.grid[index - 1].black) {
        index--;
      }
      while (index < (row + 1) * columns && !game.puzzle.grid[index].black) {
        indexArray.push(index);
        index++;
      }
    } else {
      while (index >= columns && !game.puzzle.grid[index - columns].black) {
        index -= columns;
      }
      while (
      index < game.puzzle.rows * columns &&
      !game.puzzle.grid[index].black)
      {
        indexArray.push(index);
        index += columns;
      }
    }
    return indexArray;
  }

  /**
   * Highlights an across clue and location in puzzle based on which cell
   * the user clicks
   * @param {Object} cell Cell the user clicked
   */
  function selectAcross(cell) {
    var row = cell.parentElement.rowIndex;
    var col = cell.cellIndex;
    var rowOffset = row * columns;
    var index = row * columns + col;

    clearHighlights();
    idxArray = getWordBlock(cell, 'across');
    currentClue = game.puzzle.grid[idxArray[0]].clueNum;var _iterator4 = _createForOfIteratorHelper(
    acrossClues.children),_step4;try {for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {var clue = _step4.value;
        var clueNumStr = clue.children[0].textContent.split('.')[0];
        if (clueNumStr === currentClue.toString()) {
          clue.classList.add('rangeHighlight', 'cluePop');
          acrossClues.scrollBy({
            top: clue.offsetTop - 100 - acrossClues.scrollTop,
            left: 0,
            behavior: 'smooth' });

          singleClue.innerText = clue.children[1].textContent;
          break;
        }
      }} catch (err) {_iterator4.e(err);} finally {_iterator4.f();}
    var currentCol = index - rowOffset;
    var currentCell = cell.parentElement.children[currentCol];
    cell.parentElement.children[idxArray[0] - rowOffset].classList.add(
    'border2pxLeft');var _iterator5 = _createForOfIteratorHelper(

    idxArray),_step5;try {for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {var idx = _step5.value;
        currentCol = idx - rowOffset;
        currentCell = cell.parentElement.children[currentCol];
        currentCell.classList.add('border2pxTop', 'border2pxBottom');
        currentCell.classList.add(
        currentCol === col ? 'currCellHighlight' : 'rangeHighlight');

      }} catch (err) {_iterator5.e(err);} finally {_iterator5.f();}
    cell.parentElement.children[
    idxArray[idxArray.length - 1] - rowOffset].
    classList.add('border2pxRight');
  }

  /**
   * Highlights a down clue and location in puzzle based on which cell
   * the user clicks
   * @param {Object} cell Cell the user clicked
   */
  function selectDown(cell) {
    var row = cell.parentElement.rowIndex;
    var col = cell.cellIndex;
    var index = row * columns + col;

    clearHighlights();
    idxArray = getWordBlock(cell, 'down');
    // get the number of the clue number
    currentClue = game.puzzle.grid[idxArray[0]].clueNum;var _iterator6 = _createForOfIteratorHelper(
    downClues.children),_step6;try {for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {var clue = _step6.value;
        var clueNumStr = clue.children[0].textContent.split('.')[0];
        if (clueNumStr === currentClue.toString()) {
          clue.classList.add('rangeHighlight', 'cluePop');
          downClues.scrollBy({
            top: clue.offsetTop - 100 - downClues.scrollTop,
            left: 0,
            behavior: 'smooth' });

          singleClue.innerText = clue.children[1].textContent;
        }
      }} catch (err) {_iterator6.e(err);} finally {_iterator6.f();}
    var currentRow = Math.floor(index / columns);
    var currentCell = puzTable.children[0].children[currentRow].children[col];
    puzTable.children[0].children[Math.floor(idxArray[0] / columns)].children[
    col].
    classList.add('border2pxTop');var _iterator7 = _createForOfIteratorHelper(
    idxArray),_step7;try {for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {var idx = _step7.value;
        currentRow = Math.floor(idx / columns);
        currentCell = puzTable.children[0].children[currentRow].children[col];
        currentCell.classList.add('border2pxLeft', 'border2pxRight');
        currentCell.classList.add(
        currentRow === row ? 'currCellHighlight' : 'rangeHighlight');

      }} catch (err) {_iterator7.e(err);} finally {_iterator7.f();}
    puzTable.children[0].children[
    Math.floor(idxArray[idxArray.length - 1] / columns)].
    children[col].classList.add('border2pxBottom');
  }

  /** Removes clue cell highlighting from all cells */
  function clearHighlights() {
    // console.log(puzTable.children[0]);
    var rowArray = puzTable.children[0].children;var _iterator8 = _createForOfIteratorHelper(

    rowArray),_step8;try {for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {var row = _step8.value;var _iterator11 = _createForOfIteratorHelper(
        row.children),_step11;try {for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {var cell = _step11.value;
            if (cell.className !== 'black') {
              cell.classList.remove(
              'rangeHighlight',
              'currCellHighlight',
              'border2pxBottom',
              'border2pxRight',
              'border2pxLeft',
              'border2pxTop');

            }
          }} catch (err) {_iterator11.e(err);} finally {_iterator11.f();}
      }} catch (err) {_iterator8.e(err);} finally {_iterator8.f();}var _iterator9 = _createForOfIteratorHelper(
    acrossClues.children),_step9;try {for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {var clue = _step9.value;
        clue.classList.remove('rangeHighlight', 'cluePop');
      }} catch (err) {_iterator9.e(err);} finally {_iterator9.f();}var _iterator10 = _createForOfIteratorHelper(
    downClues.children),_step10;try {for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {var _clue2 = _step10.value;
        _clue2.classList.remove('rangeHighlight', 'cluePop');
      }} catch (err) {_iterator10.e(err);} finally {_iterator10.f();}
  }

  /**
   * This function fetches a puzzle based on the user's selection and then
   * calls functions to format and display the puzzle
   * @param {Object} paramObject Object with competitors and puzzle difficulty
   */
  function loadPuzzle(paramObject) {
    document.getElementById('puzTitle').innerText = 'Fetching data...';

    var difficulty = paramObject.difficulty;

    var directory = 'puzDirMed.json';
    var year = '1976';
    var month = '01';
    var day = '01';

    // Stop listening for previous puzzle changes
    if (puzzleId) {
      db.collection('games').
      doc(puzzleId).
      onSnapshot(function () {});
    }

    if (difficulty === 'hard') {
      directory = 'puzDirHard.json';
    } else if (difficulty === 'easy') {
      directory = 'puzDirEasy.json';
    }

    fetch(directory).
    then(function (response) {
      return response.json();
    }).
    then(function (dir) {
      var years = Object.getOwnPropertyNames(dir);
      year = years[Math.floor(Math.random() * years.length)];
      var months = Object.getOwnPropertyNames(dir[year]);
      month = months[Math.floor(Math.random() * months.length)];
      var days = dir[year][month];
      day = days[Math.floor(Math.random() * days.length)];
    }).
    then(function () {
      var baseUrl =
      'https://raw.githubusercontent.com/doshea/nyt_crosswords/master';
      var url = "".concat(baseUrl, "/").concat(year, "/").concat(month, "/").concat(day);
      fetch(url).
      then(function (response) {
        return response.json();
      }).
      then(function (obj) {
        parsePuzzle(obj);
        saveNewPuzzle(paramObject);
        showPuzzle();
        location.hash = '#puzzle';
      })["catch"](
      function (error) {
        console.error('Error fetching puzzle: ', error);
      });
    })["catch"](
    function (error) {
      console.error('Error fetching puzzle date: ', error);
    });
  }

  /**
   * This function fetches an active puzzle based on the user's selection
   * and then calls functions to format and display the puzzle
   * @param {String} newPuzzleId Firestore game (puzzle) id
   */
  function fetchPuzzle(newPuzzleId) {
    document.getElementById('puzTitle').innerText = 'Fetching data...';

    var db = window.firebase.firestore();
    var docRef = db.collection('games').doc(newPuzzleId);

    // Stop listening for previous puzzle changes
    if (puzzleId) {
      db.collection('games').
      doc(puzzleId).
      onSnapshot(function () {});
    }

    docRef.onSnapshot(
    function (doc) {
      game = doc.data();
      if (game.status === 'started') {
        myOpponentUid =
        game.initiator.uid === currentUser.uid ?
        game.opponent.uid :
        game.initiator.uid;
        columns = game.puzzle.cols;
        myTurn = game.nextTurn !== myOpponentUid;
        updateScoreHighlighting();
      }
      puzzleId = newPuzzleId;
      showPuzzle();
      location.hash = '#puzzle';
    },
    function (error) {
      console.error('Error getting puzzle: ', error);
    });

  }

  /** Utility function to update score display */
  function updateScoreHighlighting() {
    scores.children[0].classList.remove(
    myTurn ? 'bgColorTransWhite' : 'bgColorTransGold');

    scores.children[0].classList.add(
    myTurn ? 'bgColorTransGold' : 'bgColorTransWhite');

    scores.children[2].classList.remove(
    myTurn ? 'bgColorTransGold' : 'bgColorTransWhite');

    scores.children[2].classList.add(
    myTurn ? 'bgColorTransWhite' : 'bgColorTransGold');

  }

  /**
   * Parse the fetched puzzle into a more compact form
   * @param {Object} puzzle Puzzle object returned from fetch
   */
  function parsePuzzle(puzzle) {
    var rows = puzzle.size.rows;
    var cols = puzzle.size.cols;
    game = {};
    game.emptySquares = rows * cols;
    game.puzzle = {};
    game.puzzle.cols = cols;
    game.puzzle.rows = rows;
    game.puzzle.author = puzzle.author;
    game.puzzle.clues = puzzle.clues;
    game.puzzle.copyright = puzzle.copyright;
    game.puzzle.date = puzzle.date;
    game.puzzle.dow = puzzle.dow;
    game.puzzle.editor = puzzle.editor;
    game.puzzle.notepad = puzzle.notepad;
    game.puzzle.title = puzzle.title;
    game.puzzle.completedClues = {};
    game.puzzle.completedClues.across = [];
    game.puzzle.completedClues.down = [];
    game.puzzle.grid = [];
    for (var i = 0; i < puzzle.grid.length; i++) {
      game.puzzle.grid[i] = {};
      if (puzzle.grid[i] === '.') {
        game.puzzle.grid[i].black = true;
        game.emptySquares--;
      } else {
        game.puzzle.grid[i].black = false;
        game.puzzle.grid[i].value = puzzle.grid[i];
        game.puzzle.grid[i].clueNum =
        puzzle.gridnums[i] === 0 ? '' : puzzle.gridnums[i];
        game.puzzle.grid[i].status = 'free';
        game.puzzle.grid[i].circle = puzzle.circles && puzzle.circles[i] === 1;
      }
    }
    columns = cols;
    console.log(game.puzzle);
  }

  /** Saves new puzzle to firebase
   * @param {Object} paramObject Id and difficulty object passed to loadPuzzle
   * from games.js
   */
  function saveNewPuzzle(paramObject) {
    var initiatorUid = paramObject.initiator.uid;
    var iDisplayName = paramObject.initiator.displayName;
    myOpponentUid = paramObject.opponent.uid;
    var oDisplayName = paramObject.opponent.displayName;

    myTurn = true;
    game.initiator = {};
    game.initiator.uid = initiatorUid;
    game.initiator.displayName = iDisplayName;
    game.initiator.bgColor = 'bgTransRed';
    game.initiator.score = 0;
    game.initiator.squaresWon = [];
    game.initiator.errors = 0;
    game.opponent = {};
    game.opponent.uid = myOpponentUid;
    game.opponent.displayName = oDisplayName;
    game.opponent.bgColor = 'bgTransBlue';
    game.opponent.score = 0;
    game.opponent.squaresWon = [];
    game.opponent.errors = 0;
    game.difficulty = paramObject.difficulty;
    game.start = firebase.firestore.FieldValue.serverTimestamp();
    game.status = 'started';
    game.winner = null;
    game.nextTurn = initiatorUid;
    db.collection('games').
    add(game).
    then(function (docRef) {
      console.log('game written to firestore with docRef: ', docRef);
      puzzleId = docRef.id;
      db.collection('games').
      doc(puzzleId).
      onSnapshot(
      function (doc) {
        game = doc.data();
        myTurn = game.nextTurn !== myOpponentUid;
        showPuzzle();
      },
      function (error) {
        console.error('Error getting puzzle: ', error);
      });

    })["catch"](
    function (error) {
      console.error('Error writing file to firestore: ', error);
    });
  }

  /** Saves puzzle to firebase */
  function savePuzzle() {
    db.collection('games').
    doc(puzzleId).
    set(game, { merge: true })["catch"](
    function (error) {
      console.error('Error saving to firebase: ', error);
    });
  }

  /** Removes puzzle from DOM */
  function clearPuzzle() {
    puzTitle.innerText = 'Puzzle info will appear here';
    // clear out old puzzle and clues
    puzTable.innerHTML = '';
    puzAuthor.innerText = '';
    puzNotepad.classList.add('displayNone');
    puzCopy.innerHTML = '';
    clueContainer.classList.add('displayNone');
    splash.classList.remove('displayNone');
    acrossClues.innerHTML = '';
    downClues.innerHTML = '';
    singleClue.innerText = 'Select in the puzzle to reveal clue';
  }

  /** Resizes puzzle based on available space */
  function resizePuzzle() {
    if (puzTable.children.length === 0) return;
    // console.log(puzTable.children[0]);
    var cellDim = getCellDim();
    var tableDim = cellDim * game.puzzle.rows;
    var rowArray = puzTable.children[0].children;var _iterator12 = _createForOfIteratorHelper(

    rowArray),_step12;try {for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {var row = _step12.value;
        row.style.width = tableDim + 'px';
        var cellArray = row.children;var _iterator13 = _createForOfIteratorHelper(
        cellArray),_step13;try {for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {var cell = _step13.value;
            cell.style.width = cellDim + 'px';
            cell.style.height = cellDim + 'px';
          }} catch (err) {_iterator13.e(err);} finally {_iterator13.f();}
      }} catch (err) {_iterator12.e(err);} finally {_iterator12.f();}
    if (currentCell) {
      if (acrossWord) {
        selectAcross(currentCell);
      } else {
        selectDown(currentCell);
      }
    }
  }

  /** Helper function for toggling drawer */
  function toggleDrawer() {
    document.querySelector('.mdl-layout').MaterialLayout.toggleDrawer();
  }

  /**
   * Play currentUser's turn. Executed when the player clicks the enter
   * button
   */
  function playWord() {
    if (location.hash === '#puzzle' && !myTurn) {
      alert('Your opponent hasn\'t played their turn yet!');
      return;
    }
    if (incomplete()) return;
    if (correctAnswer()) {
      var direction = acrossWord ? 'across' : 'down';
      var clueNumber = game.puzzle.grid[idxArray[0]].clueNum;
      game.puzzle.completedClues[direction].push(clueNumber);
      document.
      getElementById(direction + clueNumber).
      classList.add('colorLightGray');var _iterator14 = _createForOfIteratorHelper(
      idxArray),_step14;try {for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {var index = _step14.value;
          var gridElement = game.puzzle.grid[index];
          game.puzzle.grid[index] = setCellStatus(index, gridElement);
        }} catch (err) {_iterator14.e(err);} finally {_iterator14.f();}
    }
    game.nextTurn = myOpponentUid;
    myTurn = !myTurn;
    savePuzzle();
  }

  /**
   * Checks if array of cells has a letter in each square
   * @return {boolean} true if word is incomplete, false otherwise
   */
  function incomplete() {var _iterator15 = _createForOfIteratorHelper(
    idxArray),_step15;try {for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {var i = _step15.value;
        if (!game.puzzle.grid[i].guess || game.puzzle.grid[i].guess === '') {
          return true;
        }
      }} catch (err) {_iterator15.e(err);} finally {_iterator15.f();}
    return false;
  }

  /**
   * Checks if array of cells is filled in correctly
   * @return {boolean} true if correct, false otherwise
   */
  function correctAnswer() {var _iterator16 = _createForOfIteratorHelper(
    idxArray),_step16;try {for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {var index = _step16.value;
        var gridElement = game.puzzle.grid[index];
        if (gridElement.guess !== gridElement.value) {
          return false;
        }
      }} catch (err) {_iterator16.e(err);} finally {_iterator16.f();}
    return true;
  }

  /**
   * Sets values for gridElement based on currentUser play
   * @param {number} index index of cell
   * @param {Object} gridElement game.puzzle grid array object
   * @return {Object} Updated grid element object
   */
  function setCellStatus(index, gridElement) {
    var player =
    game.initiator.uid === currentUser.uid ? 'initiator' : 'opponent';
    if (gridElement.status === 'locked') {
      game[player].score += scoreValues[gridElement.value];
      return gridElement;
    }
    game[player].score += scoreCell(index);
    game[player].squaresWon.push(index);
    game.emptySquares--;
    gridElement.bgColor = game[player].bgColor;
    gridElement.status = 'locked';
    return gridElement;
  }

  /**
   * Adds to score if orthogonal word is completed by this play
   * @param {number} index index of cell
   * @return {number} additional score due to completion of orthogonal word
   */
  function scoreCell(index) {
    var row = Math.floor(index / columns);
    var col = index - row * columns;
    var cell = puzTable.children[0].children[row].children[col];
    var direction = acrossWord ? 'down' : 'across';
    var wordBlock = getWordBlock(cell, direction);
    var addedScore = 0;var _iterator17 = _createForOfIteratorHelper(

    wordBlock),_step17;try {for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {var idx = _step17.value;
        if (idx === index) {
          addedScore += 2 * scoreValues[game.puzzle.grid[idx].value];
        } else if (game.puzzle.grid[idx].status === 'locked') {
          addedScore += scoreValues[game.puzzle.grid[idx].value];
        } else {
          return scoreValues[game.puzzle.grid[index].value];
        }
      }} catch (err) {_iterator17.e(err);} finally {_iterator17.f();}
    var clueNumber = game.puzzle.grid[wordBlock[0]].clueNum;
    game.puzzle.completedClues[direction].push(clueNumber);
    return addedScore;
  }

  /**
   * Adds a letter to the puzzle from physical or virtual keyboard event and
   * moves forward one space
   * @param {Event} event Keyboard or touch event from physical or virtual
   * keyboard
   */
  function enterLetter(event) {
    if (event.keyCode === 13) {
      playWord();
      return;
    }
    var letter;
    if (event.key) {
      letter = event.key;
    } else {
      var node = event.target;
      while (node.classList[0] !== 'kbButton') {
        node = node.parentNode;
      }
      letter = node.childNodes[0].childNodes[0].data;
    }
    if (letter && letter.toLowerCase() === 'backspace') {
      undoEntry();
      return;
    }
    // if (letter && letter.toLowerCase() === 'enter') {
    //   playWord();
    //   return;
    // }
    if (!letter || !letter.match(/^[a-zA-Z]$/)) return;
    if (currentCell) {
      var row = currentCell.parentElement.rowIndex;
      var col = currentCell.cellIndex;
      var index = row * columns + col;
      var nextCellIndex = idxArray.indexOf(index) + 1;
      var localIdxArray = idxArray.
      slice(nextCellIndex).
      concat(idxArray.slice(0, nextCellIndex));
      var letterDiv = document.createElement('div');
      // console.log(idxArray);
      // console.log(localIdxArray);

      if (game.puzzle.grid[index].status === 'locked') {
        // alert('Sorry, that square is locked by a previous answer');
        return;
      }
      game.puzzle.grid[index].guess = letter.toUpperCase();
      letterDiv.appendChild(document.createTextNode(letter.toUpperCase()));
      letterDiv.classList.add('marginAuto');
      currentCell.children[0].replaceChild(
      letterDiv,
      currentCell.children[0].children[0]);

      currentCell.classList.remove('currCellHighlight');
      currentCell.classList.add('rangeHighlight');var _iterator18 = _createForOfIteratorHelper(
      localIdxArray),_step18;try {for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {var idx = _step18.value;
          if (game.puzzle.grid[idx].status !== 'locked') {
            row = Math.floor(idx / columns);
            col = idx - row * columns;
            currentCell = puzTable.children[0].children[row].children[col];
            currentCell.classList.remove('rangeHighlight');
            currentCell.classList.add('currCellHighlight');
            break;
          }
        }} catch (err) {_iterator18.e(err);} finally {_iterator18.f();}
    }
  }

  /**
   * Removes letter (if present) from current cell and moves
   * backward one space
   */
  function undoEntry() {
    if (currentCell) {
      var row = currentCell.parentElement.rowIndex;
      var col = currentCell.cellIndex;
      var index = row * columns + col;
      // reverse copy idxArray so we go backwards instead of forwards
      var localIdxArray = [];
      for (var i = 0, j = idxArray.length; i < idxArray.length; i++, j--) {
        localIdxArray[i] = idxArray[j - 1];
      }
      var nextCellIndex = localIdxArray.indexOf(index) + 1;
      localIdxArray = localIdxArray.
      slice(nextCellIndex).
      concat(localIdxArray.slice(0, nextCellIndex));
      var letterDiv = document.createElement('div');
      // console.log(idxArray);
      // console.log(localIdxArray);

      if (game.puzzle.grid[index].status === 'locked') {
        // alert('Sorry, that square is locked by a previous answer');
        return;
      }
      letterDiv.appendChild(document.createTextNode(''));
      letterDiv.classList.add('marginAuto');
      currentCell.children[0].replaceChild(
      letterDiv,
      currentCell.children[0].children[0]);

      currentCell.classList.remove('currCellHighlight');
      currentCell.classList.add('rangeHighlight');var _iterator19 = _createForOfIteratorHelper(
      localIdxArray),_step19;try {for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {var idx = _step19.value;
          if (game.puzzle.grid[idx].status !== 'locked') {
            row = Math.floor(idx / columns);
            col = idx - row * columns;
            currentCell = puzTable.children[0].children[row].children[col];
            currentCell.classList.remove('rangeHighlight');
            currentCell.classList.add('currCellHighlight');
            break;
          }
        }} catch (err) {_iterator19.e(err);} finally {_iterator19.f();}
    }
  }

  /** Concede the game immediately */
  function concede() {
    var me = currentUser.uid === game.initiator.uid ?
    'initiator' : 'opponent';
    var they = me === 'initiator' ? 'opponent' : 'initiator';

    game.emptySquares = 0;var _iterator20 = _createForOfIteratorHelper(
    game.puzzle.grid),_step20;try {for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {var square = _step20.value;
        if (square.status && square.status === 'free') {
          square.status = 'locked';
          square.guess = square.value;
          square.bgColor = game[they].bgColor;
          game[they].score += 1;
        }
      }} catch (err) {_iterator20.e(err);} finally {_iterator20.f();}
    savePuzzle();
  }

  concessionBtn.addEventListener('click', concede);
  document.addEventListener('keyup', enterLetter);
  window.addEventListener('resize', resizePuzzle);
  var keyList = keyboard.getElementsByClassName('kbButton');var _iterator21 = _createForOfIteratorHelper(
  keyList),_step21;try {for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {var node = _step21.value;
      node.addEventListener('click', enterLetter);
    }} catch (err) {_iterator21.e(err);} finally {_iterator21.f();}
  document.getElementById('backspace').addEventListener('click', undoEntry);
  document.getElementById('enter').addEventListener('click', playWord);
  document.
  getElementById('closeDrawer').
  addEventListener('click', toggleDrawer);
  screenToggle.addEventListener('click', toggleScreen);

  /** Toggle between window and full screen */
  function toggleScreen() {
    if (window.screenfull.enabled) {
      window.screenfull.toggle();
    }
  }

  if (window.screenfull.enabled) {
    window.screenfull.on('change', function () {
      screenToggle.innerText = window.screenfull.isFullscreen ?
      'fullscreen_exit' :
      'fullscreen';
    });
  }

  /** Init in case we need it */
  function init() {
    console.log('The dude abides!');
  }

  return {
    // initPicker: initPicker,
    init: init,
    loadPuzzle: loadPuzzle,
    fetchPuzzle: fetchPuzzle,
    clearPuzzle: clearPuzzle };

}();

puzzleWorker.init();
//# sourceMappingURL=data:application/json;charset=utf8;base64,

"use strict"; /* eslint-env es6, browser */
(function () {
  window.addEventListener('load', function () {
    initApp();
  });

  /** Initialize after document loads */
  function initApp() {
    var authButton = document.getElementById('authButton');
    var authContainer = document.getElementById('firebaseuiAuthContainer');
    var profileName = document.getElementById('profileName');
    var avatar = document.getElementById('avatar');
    var puzTable = document.getElementById('puzTable');
    var clueContainer = document.getElementById('clueContainer');
    var kbContainer = document.getElementById('kbContainer');
    var splash = document.getElementById('splash');
    var firebase = window.firebase;
    var firebaseui = window.firebaseui;
    // const db = firebase.firestore;
    // Initialize the FirebaseUI Widget using Firebase.
    var ui = new firebaseui.auth.AuthUI(firebase.auth());
    var uid;
    var userStatusDatabaseRef;
    var userStatusFirestoreRef;

    var uiConfig = {
      signInSuccessUrl: './',
      signInOptions: [
      // Leave the lines as is for the providers you want to offer your users.
      firebase.auth.GoogleAuthProvider.PROVIDER_ID,
      firebase.auth.EmailAuthProvider.PROVIDER_ID
      // firebase.auth.FacebookAuthProvider.PROVIDER_ID,
      // firebase.auth.TwitterAuthProvider.PROVIDER_ID,
      // firebase.auth.GithubAuthProvider.PROVIDER_ID,
      // firebase.auth.PhoneAuthProvider.PROVIDER_ID,
      ],
      // Terms of service url.
      tosUrl: './#tos',
      // Privacy policy url.
      privacyPolicyUrl: './#privacy' };


    // We'll create two constants which we will write to
    // the Realtime database when this device is offline
    // or online.
    var isOfflineForDatabase = {
      state: 'offline',
      lastChanged: firebase.database.ServerValue.TIMESTAMP };

    var isOnlineForDatabase = {
      state: 'online',
      lastChanged: firebase.database.ServerValue.TIMESTAMP };

    // Firestore uses a different server timestamp value, so we'll
    // create two more constants for Firestore state.
    var isOfflineForFirestore = {
      state: 'offline',
      lastChanged: firebase.firestore.FieldValue.serverTimestamp() };

    var isOnlineForFirestore = {
      state: 'online',
      lastChanged: firebase.firestore.FieldValue.serverTimestamp() };


    // The start method will wait until the DOM is loaded.
    ui.start('#firebaseuiAuthContainer', uiConfig);

    firebase.auth().onAuthStateChanged(function (user) {
      if (user) {
        // User is signed in.
        uid = user.uid;
        isOnlineForFirestore.displayName = user.displayName;
        isOnlineForFirestore.photoURL = user.photoURL;
        isOnlineForFirestore.providerId = user.providerData[0].providerId;
        isOnlineForFirestore.uid = uid;
        isOnlineForFirestore.privateData = {
          email: user.email,
          emailVerified: user.emailVerified,
          phoneNumber: user.phoneNumber,
          providerData: user.providerData,
          providerId: user.providerId };


        authButton.textContent = 'sign out';
        profileName.textContent = user.displayName;
        avatar.src =
        user.photoURL ? user.photoURL : 'images/avatar_circle_black.png';

        // Create a reference to this user's specific status node.
        // This is where we will store data about being online/offline.
        userStatusDatabaseRef = firebase.database().ref("/users/".concat(uid));
        userStatusFirestoreRef = firebase.firestore().doc("/users/".concat(uid));

        firebase.database().ref('.info/connected').on('value', function (snapshot) {
          if (snapshot.val() === false) {
            // Instead of simply returning, we'll also set Firestore's state
            // to "offline". This ensures that our Firestore cache is aware
            // of the switch to "offline."
            userStatusFirestoreRef.set(isOfflineForFirestore, { merge: true });
            return;
          }
          userStatusDatabaseRef.onDisconnect().
          set(isOfflineForDatabase).then(function () {
            userStatusDatabaseRef.set(isOnlineForDatabase);
            userStatusFirestoreRef.set(isOnlineForFirestore, { merge: true });
          });
        });
        authContainer.classList.add('displayNone');
      } else {
        // User is signed out.
        authButton.textContent = 'sign in';
        authContainer.classList.remove('displayNone');
        profileName.textContent = 'N. E. Person';
        avatar.src = 'images/avatar_circle_black.png';
      }
    }, function (error) {
      console.log(error);
    });

    authButton.addEventListener('click', function () {
      document.querySelector('.mdl-layout').MaterialLayout.toggleDrawer();
      if (authButton.textContent === 'sign out') {
        window.puzzleGames.clearLists();
        userStatusFirestoreRef.
        set(isOfflineForFirestore, { merge: true }).then(function () {
          firebase.auth().signOut();
        }).then(function () {
          // Sign-out successful.
          uid = undefined;
          userStatusDatabaseRef = undefined;
          userStatusFirestoreRef = undefined;
          puzTable.classList.add('displayNone');
          clueContainer.classList.add('displayNone');
          kbContainer.classList.add('displayNone');
          splash.classList.remove('displayNone');
        })["catch"](function (error) {
          console.log(error);
        });
      } else {
        puzTable.classList.add('displayNone');
        clueContainer.classList.add('displayNone');
        kbContainer.classList.add('displayNone');
        splash.classList.remove('displayNone');
        location.hash = '#signin';
      }
    });
  }
})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,

"use strict"; /* eslint-env es6, browser */
var puzzleGames = function (document, window) {
  var querySelector = document.querySelector.bind(document);
  var gamesDialog = querySelector('#gamesDialog');
  var startGameButton = querySelector('#startGameButton');
  var headerSignin = querySelector('#headerSignin');
  // const turnIndicator = querySelector('#turnIndicator');
  var gameOverHeading = querySelector('#gameOverHeading');
  var winMessage = querySelector('#winMessage');
  var opponentHeading = querySelector('#opponentHeading');
  var opponentList = querySelector('#opponentList');
  var radioEasy = querySelector('#radioEasy');
  var radioMed = querySelector('#radioMed');
  var radioHard = querySelector('#radioHard');
  var dialogListContainer = querySelector('#dialogList');
  var activeGamesContainer = querySelector('#activeGamesContainer');
  var pastGamesContainer = querySelector('#pastGamesContainer');
  var dialogPolyfill = window.dialogPolyfill || {};
  var firebase = window.firebase;

  var currentUser = firebase.auth().currentUser;
  // let difficulty = 'medium';
  var dialogList = '';
  var activeGamesHtml = '';
  var pastGamesHtml = '';
  var allUsers = {};
  // let pastGames = {};
  // holder variable for function

  firebase.auth().onAuthStateChanged(function (user) {
    currentUser = user;
    // fillLists();
    if (user) {
      headerSignin.classList.add('displayNone');
    } else {
      headerSignin.classList.remove('displayNone');
      // turnIndicator.classList.add('displayNone');
    }
  });

  if (!gamesDialog.showModal) {
    dialogPolyfill.registerDialog(gamesDialog);
  }

  startGameButton.addEventListener('click', initNewGame);
  headerSignin.addEventListener('click', function () {
    location.hash = '#signin';
  });

  gamesDialog.querySelector('.close').addEventListener('click',
  closeGamesDialog);

  /** Reset radio buttons and close dialog */
  function closeGamesDialog() {
    radioMed.removeAttribute('checked');
    radioHard.removeAttribute('checked');
    radioEasy.setAttribute('checked', true);
    gamesDialog.close();
  }

  /** Start a new game or send user to the login page */
  function initNewGame() {
    if (currentUser) {
      // user is logged in
      gameOverHeading.classList.add('displayNone');
      winMessage.classList.add('displayNone');
      gamesDialog.firstChild.classList.add('padding0', 'height100pct');
      opponentHeading.classList.remove('displayNone');
      opponentList.classList.remove('displayNone');
      var replayButton = querySelector('#replayButton');
      if (replayButton) {
        try {
          gamesDialog.firstChild.removeChild(replayButton);
        } catch (err) {
          // do nothing.  replayButton not attached
        }
      }
      gamesDialog.classList.add('height80pct');
      gamesDialog.showModal();
    } else {
      // user is not logged in
      location.hash = '#signin';
    }
  }

  /** Subscribe to firestore listeners */
  function subscribe() {
    firebase.firestore().collection('users').
    onSnapshot(function (snapshot) {return loadUserList(snapshot);}, function (error) {
      console.error('Error getting users: ', error);
    });
    firebase.firestore().collection('games').
    onSnapshot(function (snapshot) {return loadGames(snapshot);}, function (error) {
      console.error('Error getting games: ', error);
    });
  }

  /** Unsubscribe from firestore listeners */
  function unsubscribe() {
    firebase.firestore().collection('users').onSnapshot(function () {});
    firebase.firestore().collection('games').onSnapshot(function () {});
  }

  /**
   * Snapshot of firebase 'user' collection
   * @param {Object} snapshot Collection of users
   */
  function loadUserList(snapshot) {
    if (!currentUser) return;
    dialogListContainer.innerHTML = '';
    dialogListContainer.removeEventListener('click', loadNewGame);
    dialogList = '';
    if (snapshot.empty) {
      console.warn('No users exist yet.');
      return;
    }
    var usersObj = {};
    snapshot.docs.forEach(function (doc) {
      var uid = doc.id;
      var user = doc.data();
      usersObj[uid] = user;
      // doc.data() is never undefined for query doc snapshots
      // console.log(doc.id, ' => ', doc.data());
      if (uid !== currentUser.uid) {
        var avatar = "<i class='material-icons mdl-list__item-avatar'>person</i>";

        if (user.photoURL) {
          avatar = "<span class='picContainer material-icons mdl-list__item-avatar'>\n  <div>\n    <img class='photoCrop' src='".concat(


          user.photoURL, "' alt='profile picture'>\n  </div>\n</span>");


        }
        dialogList += "<li id='".concat(
        uid, "' class='mdl-list__item mdl-list__item--two-line cursorPointer'>\n   <span class='mdl-list__item-primary-content'>\n     ").concat(

        avatar, "\n     <span>").concat(
        user.displayName, "</span>\n     <span class='mdl-list__item-sub-title'>\n       ").concat(

        user.providerId.split('.')[0], "\n     </span>\n   </span>\n   <span class='mdl-list__item-secondary-content'>\n     <span class='mdl-list__item-secondary-info'>Play</span>\n     <i class='material-icons'>grid_on</i>\n   </span>\n </li>");







      }
    });
    allUsers = usersObj;
    // console.log(dialogList);
    dialogListContainer.innerHTML = dialogList;
    dialogListContainer.addEventListener('click', loadNewGame);
  }

  /**
   * Snapshot of firebase 'games' collection
   * @param {Object} snapshot Collection of games
   */
  function loadGames(snapshot) {
    if (!currentUser) return;
    activeGamesContainer.innerHTML = 'No active games yet. Start one!';
    pastGamesContainer.innerHTML = 'No completed games yet';
    activeGamesContainer.removeEventListener('click', loadActiveGame);
    activeGamesHtml = '';
    pastGamesHtml = '';
    if (snapshot.empty) {
      console.warn('No games exist yet.');
      return;
    }
    snapshot.docs.forEach(function (doc) {
      // doc.data() is never undefined for query doc snapshots
      // console.log(doc.id, ' => ', doc.data());
      var game = doc.data();
      var avatar = "<i class='material-icons mdl-list__item-avatar'>person</i>";
      if (game.status === 'started' && (
      game.initiator.uid === currentUser.uid ||
      game.opponent.uid === currentUser.uid)) {
        var myOpponent = game.initiator.uid === currentUser.uid ?
        game.opponent : game.initiator;
        var opponentPhoto = allUsers[myOpponent.uid] &&
        allUsers[myOpponent.uid].photoURL;
        if (opponentPhoto) {
          avatar = "<span class='picContainer material-icons mdl-list__item-avatar'>\n  <div>\n    <img class='photoCrop' src='".concat(


          opponentPhoto, "' alt='profile picture'>\n  </div>\n</span>");


        }
        activeGamesHtml +=
        // eslint-disable-next-line max-len
        "<li id='".concat(doc.id, "' class='mdl-list__item mdl-list__item--two-line cursorPointer'>\n   <span class='mdl-list__item-primary-content'>\n     ").concat(

        avatar, "\n     <span>").concat(
        myOpponent.displayName, "</span>\n     <span class='mdl-list__item-sub-title'>\n       ").concat(

        currentUser.uid === game.nextTurn ? 'Your' : 'Their', " turn\n     </span>\n   </span>\n   <span class='mdl-list__item-secondary-content'>\n     <span class='mdl-list__item-secondary-info'>Play</span>\n     <i class='material-icons'>grid_on</i>\n   </span>\n </li>");







      } else if (game.initiator.uid === currentUser.uid ||
      game.opponent.uid === currentUser.uid) {
        var _myOpponent = game.initiator.uid === currentUser.uid ?
        game.opponent : game.initiator;
        var result = 'Game cancelled';
        if (game.status === 'finished') {
          result = currentUser.uid === game.winner ?
          'You won!!' :
          'They won';
        } else if (game.status === 'abandoned') {
          result = 'Game abandoned';
        }
        // pastGames[doc.id] = {};
        // pastGames[doc.id].difficulty = game.difficulty;
        var _opponentPhoto = allUsers[_myOpponent.uid] &&
        allUsers[_myOpponent.uid].photoURL;
        if (_opponentPhoto) {
          avatar = "<span class='picContainer material-icons mdl-list__item-avatar'>\n  <div>\n    <img class='photoCrop' src='".concat(


          _opponentPhoto, "' alt='profile picture'>\n  </div>\n</span>");


        }
        pastGamesHtml += "<li id='".concat(
        doc.id, "' class='mdl-list__item mdl-list__item--two-line cursorPointer'>\n   <span class='mdl-list__item-primary-content'>\n     ").concat(


        avatar, "\n     <span>").concat(
        _myOpponent.displayName, "</span>\n     <span class='mdl-list__item-sub-title'>").concat(
        result, "</span>\n   </span>\n </li>");


      }
    });
    // console.log(dialogList);
    activeGamesContainer.innerHTML =
    activeGamesHtml === '' ?
    'No active games yet. Start one!' :
    activeGamesHtml;
    pastGamesContainer.innerHTML =
    pastGamesHtml === '' ? 'No completed games yet' : pastGamesHtml;
    activeGamesContainer.addEventListener('click', loadActiveGame);
    pastGamesContainer.addEventListener('click', showPastGame);
  }

  /**
   * Show dialog for user to decide if they want to replay the opponent
   * @param {Object} event Click event from replayButton in dialog
   */
  function showPastGame(event) {
    var eventTarget = event.target;
    while (!eventTarget.id) {
      if (eventTarget.nodeName.toLowerCase() === 'ul') return;
      eventTarget = eventTarget.parentElement;
    }
    window.puzzleWorker.fetchPuzzle(eventTarget.id);
  }

  /**
   * Load game based on user selection
   * @param {Object} event Click event from dialogListContainer
   */
  function loadNewGame(event) {
    var target = event.target.parentElement;
    if (target.id === '') {
      target = target.parentElement;
    }
    var difficulty =
    radioMed.parentElement.classList.contains('is-checked') ?
    'medium' : 'easy';
    difficulty =
    radioHard.parentElement.classList.contains('is-checked') ?
    'hard' : difficulty;
    closeGamesDialog();

    window.puzzleWorker.loadPuzzle({
      initiator: {
        uid: currentUser.uid,
        displayName: currentUser.displayName },

      opponent: {
        uid: target.id,
        displayName: allUsers[target.id].displayName },

      difficulty: difficulty });

    // unsubscribe();
    // location.hash = '#puzzle';
  }

  /**
   * Show dialog for user to decide if they want to replay the opponent
   * @param {Object} game Previous game versus the opponent
   * @param {string} result Message about who won
   */
  function showReplayDialog(game, result) {
    winMessage.innerText = result;
    gameOverHeading.classList.remove('displayNone');
    winMessage.classList.remove('displayNone');
    opponentHeading.classList.add('displayNone');
    opponentList.classList.add('displayNone');
    gamesDialog.classList.remove('height80pct');
    gamesDialog.firstChild.classList.remove('padding0', 'height100pct');
    var replayButton = querySelector('#replayButton');
    if (!replayButton) {
      replayButton = document.createElement('button');
      replayButton.setAttribute('id', 'replayButton');
      replayButton.classList.add('mdl-button', 'mdl-js-button',
      'mdl-button--raised', 'mdl-js-ripple-effect',
      'mdl-button--accent', 'cursorPointer');
      replayButton.innerText = 'Play Again!';
      gamesDialog.firstChild.appendChild(replayButton);
      replayButton.addEventListener('click', replayOpponent);
    }
    if (game.difficulty === 'medium') {
      radioEasy.removeAttribute('checked');
      radioHard.removeAttribute('checked');
      radioMed.setAttribute('checked', true);
    } else if (game.difficulty === 'hard') {
      radioEasy.removeAttribute('checked');
      radioMed.removeAttribute('checked');
      radioHard.setAttribute('checked', true);
    } else {
      radioMed.removeAttribute('checked');
      radioHard.removeAttribute('checked');
      radioEasy.setAttribute('checked', true);
    }
    if (!gamesDialog.open) gamesDialog.showModal();

    /** Load game based on user selection */
    function replayOpponent() {
      var difficulty =
      radioMed.parentElement.classList.contains('is-checked') ?
      'medium' : 'easy';
      difficulty =
      radioHard.parentElement.classList.contains('is-checked') ?
      'hard' : difficulty;
      var they = currentUser.uid === game.initiator.uid ?
      'opponent' : 'initiator';
      closeGamesDialog();

      // load puzzle based on uids of players
      window.puzzleWorker.loadPuzzle({
        initiator: {
          uid: currentUser.uid,
          displayName: currentUser.displayName },

        opponent: {
          uid: game[they].uid,
          displayName: game[they].displayName },

        difficulty: difficulty });

    }
  }

  /**
   * Load game based on user selection
   * @param {Object} event Click event from dialogListContainer
   */
  function loadActiveGame(event) {
    var target = event.target.parentElement;
    if (target.id === '') {
      window.puzzleWorker.fetchPuzzle(target.parentElement.id);
    } else {
      window.puzzleWorker.fetchPuzzle(target.id);
    }
    // if (event.target.nodeName.toLowerCase() !== 'span' ||
    //   event.target.id === '') return;
    // window.puzzleWorker.fetchPuzzle(event.target.parentElement.id);
    // unsubscribe();
    // location.hash = '#puzzle';
  }

  /** Clear lists on games view */
  function clearLists() {
    activeGamesContainer.innerHTML =
    'You must sign in to see your active games';
    pastGamesContainer.innerHTML =
    'You must sign in to see your completed games';
    window.puzzleWorker.clearPuzzle();
  }

  /** Init in case we need it */
  function init() {
    console.log('puzzleWorker here!');
  }

  return {
    // initPicker: initPicker,
    init: init,
    subscribe: subscribe,
    unsubscribe: unsubscribe,
    clearLists: clearLists,
    showReplayDialog: showReplayDialog };

}(document, window);

puzzleGames.subscribe();
//# sourceMappingURL=data:application/json;charset=utf8;base64,

"use strict"; /* eslint-env es6, browser */
(function (document, window) {
  window.addEventListener('load', function () {
    initApp();
  });

  /** Initialize after document loads */
  function initApp() {
    var querySelector = document.querySelector.bind(document);
    var appContainer = querySelector('#appContainer');
    var gamesPanel = querySelector('#gamesPanel');
    var gamesDialog = querySelector('#gamesDialog');
    var scores = querySelector('#scores');
    var concessionBtnContainer = querySelector('#concessionBtnContainer');
    var puzAuthor = querySelector('#puzAuthor');
    var puzCopy = querySelector('#puzCopy');

    window.addEventListener('hashchange', navigate);

    /**
     * Navigate based on hash change
     */
    function navigate() {
      if (location.hash === '#puzzle') {
        try {
          var replayButton = querySelector('#replayButton');
          if (!replayButton) {
            gamesDialog.close();
          }
        } catch (err) {
          // do nothing, error OK
        }
        window.puzzleGames.unsubscribe();
        gamesPanel.classList.add('slideOut');
        appContainer.classList.add('slideIn');
        concessionBtnContainer.classList.remove('displayNone');
        puzAuthor.classList.remove('displayNone');
        puzCopy.classList.remove('displayNone');
      } else if (location.hash === '#signin') {
        window.puzzleGames.unsubscribe();
        gamesPanel.classList.add('slideOut');
        appContainer.classList.add('slideIn');
        scores.classList.remove('displayFlex');
        scores.classList.add('displayNone');
        concessionBtnContainer.classList.remove('displayNone');
        puzAuthor.classList.add('displayNone');
        puzCopy.classList.add('displayNone');
      } else if (location.hash === '#games') {
        try {
          gamesDialog.close();
        } catch (err) {
          // do nothing, error OK
        }
        window.puzzleGames.subscribe();
        gamesPanel.classList.remove('slideOut');
        appContainer.classList.remove('slideIn');
        scores.classList.remove('displayFlex');
        scores.classList.add('displayNone');
        puzAuthor.classList.add('displayNone');
        puzCopy.classList.add('displayNone');
      }
    }

    if (location.hash !== '#games') {
      location.hash = '#games';
    }
  }
})(document, window);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJvdXRlci5qcyJdLCJuYW1lcyI6WyJkb2N1bWVudCIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbml0QXBwIiwicXVlcnlTZWxlY3RvciIsImJpbmQiLCJhcHBDb250YWluZXIiLCJnYW1lc1BhbmVsIiwiZ2FtZXNEaWFsb2ciLCJzY29yZXMiLCJjb25jZXNzaW9uQnRuQ29udGFpbmVyIiwicHV6QXV0aG9yIiwicHV6Q29weSIsIm5hdmlnYXRlIiwibG9jYXRpb24iLCJoYXNoIiwicmVwbGF5QnV0dG9uIiwiY2xvc2UiLCJlcnIiLCJwdXp6bGVHYW1lcyIsInVuc3Vic2NyaWJlIiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlIiwic3Vic2NyaWJlIl0sIm1hcHBpbmdzIjoiY0FBQTtBQUNBLENBQUMsVUFBU0EsUUFBVCxFQUFtQkMsTUFBbkIsRUFBMkI7QUFDMUJBLEVBQUFBLE1BQU0sQ0FBQ0MsZ0JBQVAsQ0FBd0IsTUFBeEIsRUFBZ0MsWUFBVztBQUN6Q0MsSUFBQUEsT0FBTztBQUNSLEdBRkQ7O0FBSUE7QUFDQSxXQUFTQSxPQUFULEdBQW1CO0FBQ2pCLFFBQU1DLGFBQWEsR0FBR0osUUFBUSxDQUFDSSxhQUFULENBQXVCQyxJQUF2QixDQUE0QkwsUUFBNUIsQ0FBdEI7QUFDQSxRQUFNTSxZQUFZLEdBQUdGLGFBQWEsQ0FBQyxlQUFELENBQWxDO0FBQ0EsUUFBTUcsVUFBVSxHQUFHSCxhQUFhLENBQUMsYUFBRCxDQUFoQztBQUNBLFFBQU1JLFdBQVcsR0FBR0osYUFBYSxDQUFDLGNBQUQsQ0FBakM7QUFDQSxRQUFNSyxNQUFNLEdBQUdMLGFBQWEsQ0FBQyxTQUFELENBQTVCO0FBQ0EsUUFBTU0sc0JBQXNCLEdBQUdOLGFBQWEsQ0FBQyx5QkFBRCxDQUE1QztBQUNBLFFBQU1PLFNBQVMsR0FBR1AsYUFBYSxDQUFDLFlBQUQsQ0FBL0I7QUFDQSxRQUFNUSxPQUFPLEdBQUdSLGFBQWEsQ0FBQyxVQUFELENBQTdCOztBQUVBSCxJQUFBQSxNQUFNLENBQUNDLGdCQUFQLENBQXdCLFlBQXhCLEVBQXNDVyxRQUF0Qzs7QUFFQTtBQUNKO0FBQ0E7QUFDSSxhQUFTQSxRQUFULEdBQW9CO0FBQ2xCLFVBQUlDLFFBQVEsQ0FBQ0MsSUFBVCxLQUFrQixTQUF0QixFQUFpQztBQUMvQixZQUFJO0FBQ0YsY0FBTUMsWUFBWSxHQUFHWixhQUFhLENBQUMsZUFBRCxDQUFsQztBQUNBLGNBQUksQ0FBQ1ksWUFBTCxFQUFtQjtBQUNqQlIsWUFBQUEsV0FBVyxDQUFDUyxLQUFaO0FBQ0Q7QUFDRixTQUxELENBS0UsT0FBT0MsR0FBUCxFQUFZO0FBQ1o7QUFDRDtBQUNEakIsUUFBQUEsTUFBTSxDQUFDa0IsV0FBUCxDQUFtQkMsV0FBbkI7QUFDQWIsUUFBQUEsVUFBVSxDQUFDYyxTQUFYLENBQXFCQyxHQUFyQixDQUF5QixVQUF6QjtBQUNBaEIsUUFBQUEsWUFBWSxDQUFDZSxTQUFiLENBQXVCQyxHQUF2QixDQUEyQixTQUEzQjtBQUNBWixRQUFBQSxzQkFBc0IsQ0FBQ1csU0FBdkIsQ0FBaUNFLE1BQWpDLENBQXdDLGFBQXhDO0FBQ0FaLFFBQUFBLFNBQVMsQ0FBQ1UsU0FBVixDQUFvQkUsTUFBcEIsQ0FBMkIsYUFBM0I7QUFDQVgsUUFBQUEsT0FBTyxDQUFDUyxTQUFSLENBQWtCRSxNQUFsQixDQUF5QixhQUF6QjtBQUNELE9BZkQsTUFlTyxJQUFJVCxRQUFRLENBQUNDLElBQVQsS0FBa0IsU0FBdEIsRUFBaUM7QUFDdENkLFFBQUFBLE1BQU0sQ0FBQ2tCLFdBQVAsQ0FBbUJDLFdBQW5CO0FBQ0FiLFFBQUFBLFVBQVUsQ0FBQ2MsU0FBWCxDQUFxQkMsR0FBckIsQ0FBeUIsVUFBekI7QUFDQWhCLFFBQUFBLFlBQVksQ0FBQ2UsU0FBYixDQUF1QkMsR0FBdkIsQ0FBMkIsU0FBM0I7QUFDQWIsUUFBQUEsTUFBTSxDQUFDWSxTQUFQLENBQWlCRSxNQUFqQixDQUF3QixhQUF4QjtBQUNBZCxRQUFBQSxNQUFNLENBQUNZLFNBQVAsQ0FBaUJDLEdBQWpCLENBQXFCLGFBQXJCO0FBQ0FaLFFBQUFBLHNCQUFzQixDQUFDVyxTQUF2QixDQUFpQ0UsTUFBakMsQ0FBd0MsYUFBeEM7QUFDQVosUUFBQUEsU0FBUyxDQUFDVSxTQUFWLENBQW9CQyxHQUFwQixDQUF3QixhQUF4QjtBQUNBVixRQUFBQSxPQUFPLENBQUNTLFNBQVIsQ0FBa0JDLEdBQWxCLENBQXNCLGFBQXRCO0FBQ0QsT0FUTSxNQVNBLElBQUlSLFFBQVEsQ0FBQ0MsSUFBVCxLQUFrQixRQUF0QixFQUFnQztBQUNyQyxZQUFJO0FBQ0ZQLFVBQUFBLFdBQVcsQ0FBQ1MsS0FBWjtBQUNELFNBRkQsQ0FFRSxPQUFPQyxHQUFQLEVBQVk7QUFDWjtBQUNEO0FBQ0RqQixRQUFBQSxNQUFNLENBQUNrQixXQUFQLENBQW1CSyxTQUFuQjtBQUNBakIsUUFBQUEsVUFBVSxDQUFDYyxTQUFYLENBQXFCRSxNQUFyQixDQUE0QixVQUE1QjtBQUNBakIsUUFBQUEsWUFBWSxDQUFDZSxTQUFiLENBQXVCRSxNQUF2QixDQUE4QixTQUE5QjtBQUNBZCxRQUFBQSxNQUFNLENBQUNZLFNBQVAsQ0FBaUJFLE1BQWpCLENBQXdCLGFBQXhCO0FBQ0FkLFFBQUFBLE1BQU0sQ0FBQ1ksU0FBUCxDQUFpQkMsR0FBakIsQ0FBcUIsYUFBckI7QUFDQVgsUUFBQUEsU0FBUyxDQUFDVSxTQUFWLENBQW9CQyxHQUFwQixDQUF3QixhQUF4QjtBQUNBVixRQUFBQSxPQUFPLENBQUNTLFNBQVIsQ0FBa0JDLEdBQWxCLENBQXNCLGFBQXRCO0FBQ0Q7QUFDRjs7QUFFRCxRQUFJUixRQUFRLENBQUNDLElBQVQsS0FBa0IsUUFBdEIsRUFBZ0M7QUFDOUJELE1BQUFBLFFBQVEsQ0FBQ0MsSUFBVCxHQUFnQixRQUFoQjtBQUNEO0FBQ0Y7QUFDRixDQWxFRCxFQWtFR2YsUUFsRUgsRUFrRWFDLE1BbEViIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWVudiBlczYsIGJyb3dzZXIgKi9cclxuKGZ1bmN0aW9uKGRvY3VtZW50LCB3aW5kb3cpIHtcclxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgaW5pdEFwcCgpO1xyXG4gIH0pO1xyXG5cclxuICAvKiogSW5pdGlhbGl6ZSBhZnRlciBkb2N1bWVudCBsb2FkcyAqL1xyXG4gIGZ1bmN0aW9uIGluaXRBcHAoKSB7XHJcbiAgICBjb25zdCBxdWVyeVNlbGVjdG9yID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvci5iaW5kKGRvY3VtZW50KTtcclxuICAgIGNvbnN0IGFwcENvbnRhaW5lciA9IHF1ZXJ5U2VsZWN0b3IoJyNhcHBDb250YWluZXInKTtcclxuICAgIGNvbnN0IGdhbWVzUGFuZWwgPSBxdWVyeVNlbGVjdG9yKCcjZ2FtZXNQYW5lbCcpO1xyXG4gICAgY29uc3QgZ2FtZXNEaWFsb2cgPSBxdWVyeVNlbGVjdG9yKCcjZ2FtZXNEaWFsb2cnKTtcclxuICAgIGNvbnN0IHNjb3JlcyA9IHF1ZXJ5U2VsZWN0b3IoJyNzY29yZXMnKTtcclxuICAgIGNvbnN0IGNvbmNlc3Npb25CdG5Db250YWluZXIgPSBxdWVyeVNlbGVjdG9yKCcjY29uY2Vzc2lvbkJ0bkNvbnRhaW5lcicpO1xyXG4gICAgY29uc3QgcHV6QXV0aG9yID0gcXVlcnlTZWxlY3RvcignI3B1ekF1dGhvcicpO1xyXG4gICAgY29uc3QgcHV6Q29weSA9IHF1ZXJ5U2VsZWN0b3IoJyNwdXpDb3B5Jyk7XHJcblxyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2hhc2hjaGFuZ2UnLCBuYXZpZ2F0ZSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBOYXZpZ2F0ZSBiYXNlZCBvbiBoYXNoIGNoYW5nZVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBuYXZpZ2F0ZSgpIHtcclxuICAgICAgaWYgKGxvY2F0aW9uLmhhc2ggPT09ICcjcHV6emxlJykge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICBjb25zdCByZXBsYXlCdXR0b24gPSBxdWVyeVNlbGVjdG9yKCcjcmVwbGF5QnV0dG9uJyk7XHJcbiAgICAgICAgICBpZiAoIXJlcGxheUJ1dHRvbikge1xyXG4gICAgICAgICAgICBnYW1lc0RpYWxvZy5jbG9zZSgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgLy8gZG8gbm90aGluZywgZXJyb3IgT0tcclxuICAgICAgICB9XHJcbiAgICAgICAgd2luZG93LnB1enpsZUdhbWVzLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgZ2FtZXNQYW5lbC5jbGFzc0xpc3QuYWRkKCdzbGlkZU91dCcpO1xyXG4gICAgICAgIGFwcENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdzbGlkZUluJyk7XHJcbiAgICAgICAgY29uY2Vzc2lvbkJ0bkNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCdkaXNwbGF5Tm9uZScpO1xyXG4gICAgICAgIHB1ekF1dGhvci5jbGFzc0xpc3QucmVtb3ZlKCdkaXNwbGF5Tm9uZScpO1xyXG4gICAgICAgIHB1ekNvcHkuY2xhc3NMaXN0LnJlbW92ZSgnZGlzcGxheU5vbmUnKTtcclxuICAgICAgfSBlbHNlIGlmIChsb2NhdGlvbi5oYXNoID09PSAnI3NpZ25pbicpIHtcclxuICAgICAgICB3aW5kb3cucHV6emxlR2FtZXMudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICBnYW1lc1BhbmVsLmNsYXNzTGlzdC5hZGQoJ3NsaWRlT3V0Jyk7XHJcbiAgICAgICAgYXBwQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3NsaWRlSW4nKTtcclxuICAgICAgICBzY29yZXMuY2xhc3NMaXN0LnJlbW92ZSgnZGlzcGxheUZsZXgnKTtcclxuICAgICAgICBzY29yZXMuY2xhc3NMaXN0LmFkZCgnZGlzcGxheU5vbmUnKTtcclxuICAgICAgICBjb25jZXNzaW9uQnRuQ29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoJ2Rpc3BsYXlOb25lJyk7XHJcbiAgICAgICAgcHV6QXV0aG9yLmNsYXNzTGlzdC5hZGQoJ2Rpc3BsYXlOb25lJyk7XHJcbiAgICAgICAgcHV6Q29weS5jbGFzc0xpc3QuYWRkKCdkaXNwbGF5Tm9uZScpO1xyXG4gICAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLmhhc2ggPT09ICcjZ2FtZXMnKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIGdhbWVzRGlhbG9nLmNsb3NlKCk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAvLyBkbyBub3RoaW5nLCBlcnJvciBPS1xyXG4gICAgICAgIH1cclxuICAgICAgICB3aW5kb3cucHV6emxlR2FtZXMuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgZ2FtZXNQYW5lbC5jbGFzc0xpc3QucmVtb3ZlKCdzbGlkZU91dCcpO1xyXG4gICAgICAgIGFwcENvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCdzbGlkZUluJyk7XHJcbiAgICAgICAgc2NvcmVzLmNsYXNzTGlzdC5yZW1vdmUoJ2Rpc3BsYXlGbGV4Jyk7XHJcbiAgICAgICAgc2NvcmVzLmNsYXNzTGlzdC5hZGQoJ2Rpc3BsYXlOb25lJyk7XHJcbiAgICAgICAgcHV6QXV0aG9yLmNsYXNzTGlzdC5hZGQoJ2Rpc3BsYXlOb25lJyk7XHJcbiAgICAgICAgcHV6Q29weS5jbGFzc0xpc3QuYWRkKCdkaXNwbGF5Tm9uZScpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGxvY2F0aW9uLmhhc2ggIT09ICcjZ2FtZXMnKSB7XHJcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnI2dhbWVzJztcclxuICAgIH1cclxuICB9XHJcbn0pKGRvY3VtZW50LCB3aW5kb3cpO1xyXG4iXSwiZmlsZSI6InJvdXRlci5qcyJ9

//# sourceMappingURL=main.min.js.map
